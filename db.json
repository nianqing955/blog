{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/111.jpg","path":"images/111.jpg","modified":1,"renderable":0},{"_id":"source/images/2-2.png","path":"images/2-2.png","modified":1,"renderable":0},{"_id":"source/images/2-1.png","path":"images/2-1.png","modified":1,"renderable":0},{"_id":"source/images/2-4.png","path":"images/2-4.png","modified":1,"renderable":0},{"_id":"source/images/13.png","path":"images/13.png","modified":1,"renderable":0},{"_id":"source/images/12.png","path":"images/12.png","modified":1,"renderable":0},{"_id":"source/images/2-3.png","path":"images/2-3.png","modified":1,"renderable":0},{"_id":"source/images/2-5.png","path":"images/2-5.png","modified":1,"renderable":0},{"_id":"source/images/2-6.png","path":"images/2-6.png","modified":1,"renderable":0},{"_id":"source/images/2-8.png","path":"images/2-8.png","modified":1,"renderable":0},{"_id":"source/images/22.jpg","path":"images/22.jpg","modified":1,"renderable":0},{"_id":"source/images/4.png","path":"images/4.png","modified":1,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":1,"renderable":0},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/images/11.png","path":"images/11.png","modified":1,"renderable":0},{"_id":"source/images/2-7.png","path":"images/2-7.png","modified":1,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":1,"renderable":0},{"_id":"source/images/9.png","path":"images/9.png","modified":1,"renderable":0},{"_id":"source/images/10.png","path":"images/10.png","modified":1,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":1,"renderable":0},{"_id":"source/images/3.png","path":"images/3.png","modified":1,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/1.png","path":"images/1.png","modified":1,"renderable":0},{"_id":"source/images/8.png","path":"images/8.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"source/images/cover.png","path":"images/cover.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"ee5bc64b6ade0d0274b4055da2cdffb3529fb8c0","modified":1501650160000},{"_id":"source/CNAME","hash":"2fbc788d5a1d534db9e1fceba10e52e87ba72102","modified":1492606879000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1501650340000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1501650340000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1501650340000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1501650340000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1501650340000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1501650340000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1501650340000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1501650340000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1501650340000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1501650340000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1501650340000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1501650340000},{"_id":"themes/next/_config.yml","hash":"8b4acea3aa9ccf57969761abb25c72481bc3a7cc","modified":1501650741000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1501650340000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1501650340000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1501650341000},{"_id":"source/_posts/Nodejs-技术栈之Web框架的研究与应用.md","hash":"aa04a08bc1a7c6877356940a54613c1ffe2480ee","modified":1501650778000},{"_id":"source/_posts/RN框架下多屏幕尺寸自适应样式解决方案.md","hash":"895c1e98aa3ec0af529749dc54b1449f880291c2","modified":1492606879000},{"_id":"source/_posts/autopilot下的NodeJs微服务.md","hash":"1dcc205c9ad6f26dc3d8d167ea140e7b7a657714","modified":1501646315000},{"_id":"source/_posts/react同构研究.md","hash":"591ec06d9a0081979ba86a6315188b4bea17c30c","modified":1492606879000},{"_id":"source/about/index.md","hash":"0df621dc523240c7ef1f6b656f95b7efe41ef994","modified":1492606879000},{"_id":"source/images/111.jpg","hash":"c53fd25f1c5e215cc06cd21ab752b8b5661af9b5","modified":1492606879000},{"_id":"source/images/2-2.png","hash":"dfe8e93de3acda68bd6a785a4ba090e465c7f7ee","modified":1492606879000},{"_id":"source/images/2-1.png","hash":"605ad4d91bb5b0c8b94d1b04c1d46a8ed744600a","modified":1492606879000},{"_id":"source/images/2-4.png","hash":"fc29140586b5d86c358811edefec88c214587380","modified":1492606879000},{"_id":"source/images/13.png","hash":"81c1b03a949ab0c620390c73494223fb9eab7679","modified":1501057647000},{"_id":"source/images/12.png","hash":"5d99e8df14d641161b6ed33d3edad92d25d7f9ed","modified":1501056129000},{"_id":"source/images/2-3.png","hash":"23098237ad9665648b87568bf9cf04ac40b352de","modified":1492606879000},{"_id":"source/images/2-5.png","hash":"e0340ad07db721fb2c226d0c01135acb6ea3e745","modified":1492606879000},{"_id":"source/images/2-6.png","hash":"53b53dbe387e567e66e6d6fb5887e872817edbd9","modified":1492606879000},{"_id":"source/images/2-8.png","hash":"2116d4ed734b60bf449debb54e358e892e5ef9fd","modified":1492606879000},{"_id":"source/images/22.jpg","hash":"65208dea1d08609e67140b317275044e2e7592cf","modified":1492606879000},{"_id":"source/images/4.png","hash":"42b12437a2fa0c451c8437376f30a761b2842dd9","modified":1501052011000},{"_id":"source/images/6.png","hash":"725dcb00c063d3ba69ef2f3cc36926f035a4d163","modified":1501053006000},{"_id":"source/images/avatar.jpeg","hash":"19171ce8a8359ac2f8c6d35670e11c074c6f9bb9","modified":1492606879000},{"_id":"source/tags/index.md","hash":"aa1ed09e344f49cb219f1ecc40ea4a7e5d6aa180","modified":1492606879000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1501650340000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1501650340000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1501650335000},{"_id":"themes/next/.git/index","hash":"33e48031ea9dba48edd7a5eb6f9c82afe5abd623","modified":1501650341000},{"_id":"themes/next/.git/packed-refs","hash":"5f309e82950655c7c0850641ea7b096d2ebd23d7","modified":1501650340000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1501650340000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1501650340000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1501650340000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1501650340000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1501650340000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1501650340000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1501650340000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1501650340000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1501650340000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1501650340000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1501650340000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1501650340000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1501650340000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1501650340000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1501650340000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1501650340000},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1501650340000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1501650341000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1501650341000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1501650341000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1501650341000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1501650341000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1501650341000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1501650341000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1501650341000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1501650341000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1501650341000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1501650341000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1501650341000},{"_id":"source/images/11.png","hash":"5affe2cb79f33ec105e818bf1da8ac22c9a4f0ec","modified":1501056142000},{"_id":"source/images/2-7.png","hash":"d4fc8bd80147f7a4a4114de4d7ea5e4fc261ba9e","modified":1492606879000},{"_id":"source/images/5.png","hash":"b20e716ff7c275a7deb46fd02dbed68c37744efd","modified":1501052940000},{"_id":"source/images/9.png","hash":"56972ae9bd13296ef500372e8369b5d9392d2548","modified":1501054316000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"source/images/10.png","hash":"01374730bacf0dffd851b19ea4c8b926e75d7731","modified":1501055467000},{"_id":"source/images/2.png","hash":"7674001a9bd62997db75046ade07bc5ef57238fd","modified":1501053153000},{"_id":"source/images/3.png","hash":"e95b94e9404f2beae198bbf0c2a6d9db984c1532","modified":1501051964000},{"_id":"source/images/7.png","hash":"072d59be4d665f35fa763838a9033237cc54bafe","modified":1501053445000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1501650335000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1501650335000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1501650335000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1501650335000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1501650335000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1501650335000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1501650335000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1501650335000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1501650335000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1501650335000},{"_id":"themes/next/.git/logs/HEAD","hash":"c7ea5b8ffed32fee008dbe2e34363dcca3ef19d2","modified":1501650340000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1501650335000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501650340000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1501650340000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1501650340000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1501650340000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1501650340000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1501650340000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1501650340000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1501650340000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1501650340000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1501650340000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1501650340000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1501650340000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1501650340000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1501650340000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1501650340000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1501650341000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1501650341000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1501650341000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1501650341000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1501650341000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1501650341000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1501650341000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1501650341000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1501650341000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1501650341000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1501650341000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1501650341000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1501650341000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1501650341000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1501650341000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1501650341000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1501650341000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1501650341000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1501650341000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501650341000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501650341000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501650341000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501650341000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501650341000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501650341000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501650341000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501650341000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501650341000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501650341000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501650341000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501650341000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501650341000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501650341000},{"_id":"source/images/1.png","hash":"eda9ec3471af7110f42fab0178ba68d099ba6b27","modified":1501050113000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501650341000},{"_id":"source/images/8.png","hash":"5966c840b60f72eb8a3e764b60ff1633fc3b712e","modified":1501053611000},{"_id":"themes/next/.git/refs/heads/master","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1501650340000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1501650340000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1501650340000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1501650340000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1501650340000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1501650340000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1501650340000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1501650340000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1501650340000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1501650340000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1501650341000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501650341000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1501650341000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1501650341000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501650341000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1501650341000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1501650341000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1501650341000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1501650341000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1501650341000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1501650341000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1501650341000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1501650341000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1501650341000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1501650341000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1501650341000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1501650341000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1501650341000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1501650341000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1501650341000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1501650341000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1501650341000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1501650341000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501650341000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501650341000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501650341000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501650341000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501650341000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501650341000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501650341000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501650341000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501650341000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501650341000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501650341000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501650341000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501650341000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1501650341000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1501650341000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501650341000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1501650341000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1501650341000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1501650341000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1501650341000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1501650341000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1501650341000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1501650341000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501650341000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501650341000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501650341000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501650341000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501650341000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501650341000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1501650341000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1501650341000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501650341000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501650341000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501650341000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501650341000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"c7ea5b8ffed32fee008dbe2e34363dcca3ef19d2","modified":1501650340000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1501650340000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1501650341000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1501650341000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1501650341000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1501650341000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1501650341000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1501650341000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1501650341000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1501650341000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1501650341000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501650341000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501650341000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501650341000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501650341000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501650341000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501650341000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501650341000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501650341000},{"_id":"source/images/cover.png","hash":"ad34d668bcf94703a340ec40d779a54e45cecbc7","modified":1500962360000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501650341000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501650341000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c7ea5b8ffed32fee008dbe2e34363dcca3ef19d2","modified":1501650340000},{"_id":"themes/next/.git/objects/pack/pack-0dd5ca20d8ecdc805dcb86c5e3ebd15f17d290e0.idx","hash":"64dc3350b2ec0fb6911593002faa187639ca843f","modified":1501650340000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1501650341000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501650341000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1501650341000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501650341000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501650341000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501650341000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501650341000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501650341000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501650341000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501650341000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501650341000},{"_id":"themes/next/.git/objects/pack/pack-0dd5ca20d8ecdc805dcb86c5e3ebd15f17d290e0.pack","hash":"98c36e5cfb0b1d3bb9e43369eadcfc02e1dc080b","modified":1501650340000},{"_id":"public/about/index.html","hash":"ab4589841551ead176d9ab5552273931fb1375d8","modified":1501650797668},{"_id":"public/tags/index.html","hash":"f2d49daff6d317ed43acfd107bf738b5370feb4a","modified":1501650797668},{"_id":"public/2017/04/14/react同构研究/index.html","hash":"cd316d0db38f7fc9cd799dae27755e318fb80cec","modified":1501650797668},{"_id":"public/archives/index.html","hash":"fdbb59bc0728a49e0427a195df4010ae87e83a00","modified":1501650797668},{"_id":"public/archives/2017/index.html","hash":"b90602c3ad1d1d93329ddf9f0dba50ae7682ff30","modified":1501650797668},{"_id":"public/archives/2017/03/index.html","hash":"35734f3f0ccb4ab95f49f62f9b59322c289f7658","modified":1501650797668},{"_id":"public/archives/2017/04/index.html","hash":"f21404988ddd1d5db868d3cb434d8fcdbd8d3d22","modified":1501650797668},{"_id":"public/archives/2017/08/index.html","hash":"062c903d8e9a86737f33f87a58bc9c4d1e3ecfcd","modified":1501650797668},{"_id":"public/tags/NodeJs/index.html","hash":"59ba18ece198bb1bc72ab537aae1019d7b259a4f","modified":1501650797668},{"_id":"public/tags/react/index.html","hash":"cc6c5d593ba753a3d33524c793b71772a6dc6e8a","modified":1501650797668},{"_id":"public/tags/react-native/index.html","hash":"879d4cdc59d0d7fd382eb4b286047647cbbc8618","modified":1501650797668},{"_id":"public/2017/08/02/autopilot下的NodeJs微服务/index.html","hash":"6a5d9a2f4d1b2b365936febac179acbf3b2270ee","modified":1501650797668},{"_id":"public/2017/03/10/RN框架下多屏幕尺寸自适应样式解决方案/index.html","hash":"81613b65b0581a48ff0e74e2b1d366ffb7eb0de6","modified":1501650797669},{"_id":"public/2017/03/10/Nodejs-技术栈之Web框架的研究与应用/index.html","hash":"9ae465d58cd9d950b41ffe0212de7f76325465e8","modified":1501650797669},{"_id":"public/index.html","hash":"2c41fa876696526170e12926fc5c886fe5d37ad3","modified":1501650797669},{"_id":"public/CNAME","hash":"2fbc788d5a1d534db9e1fceba10e52e87ba72102","modified":1501650797677},{"_id":"public/images/2-2.png","hash":"dfe8e93de3acda68bd6a785a4ba090e465c7f7ee","modified":1501650797677},{"_id":"public/images/111.jpg","hash":"c53fd25f1c5e215cc06cd21ab752b8b5661af9b5","modified":1501650797677},{"_id":"public/images/2-1.png","hash":"605ad4d91bb5b0c8b94d1b04c1d46a8ed744600a","modified":1501650797677},{"_id":"public/images/2-4.png","hash":"fc29140586b5d86c358811edefec88c214587380","modified":1501650797677},{"_id":"public/images/13.png","hash":"81c1b03a949ab0c620390c73494223fb9eab7679","modified":1501650797677},{"_id":"public/images/12.png","hash":"5d99e8df14d641161b6ed33d3edad92d25d7f9ed","modified":1501650797677},{"_id":"public/images/2-3.png","hash":"23098237ad9665648b87568bf9cf04ac40b352de","modified":1501650797678},{"_id":"public/images/2-5.png","hash":"e0340ad07db721fb2c226d0c01135acb6ea3e745","modified":1501650797678},{"_id":"public/images/2-6.png","hash":"53b53dbe387e567e66e6d6fb5887e872817edbd9","modified":1501650797678},{"_id":"public/images/2-8.png","hash":"2116d4ed734b60bf449debb54e358e892e5ef9fd","modified":1501650797678},{"_id":"public/images/22.jpg","hash":"65208dea1d08609e67140b317275044e2e7592cf","modified":1501650797678},{"_id":"public/images/4.png","hash":"42b12437a2fa0c451c8437376f30a761b2842dd9","modified":1501650797678},{"_id":"public/images/avatar.jpeg","hash":"19171ce8a8359ac2f8c6d35670e11c074c6f9bb9","modified":1501650797678},{"_id":"public/images/6.png","hash":"725dcb00c063d3ba69ef2f3cc36926f035a4d163","modified":1501650797678},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1501650797678},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1501650797678},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1501650797678},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1501650797678},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1501650797678},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1501650797678},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1501650797678},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1501650797678},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1501650797678},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501650797678},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1501650797678},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1501650797678},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1501650797678},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1501650797678},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1501650797679},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1501650797679},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1501650797679},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1501650797679},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1501650797679},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1501650797679},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1501650797679},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1501650797679},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1501650797679},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1501650797679},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1501650797679},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1501650797679},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1501650797679},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1501650797679},{"_id":"public/images/2-7.png","hash":"d4fc8bd80147f7a4a4114de4d7ea5e4fc261ba9e","modified":1501650798207},{"_id":"public/images/5.png","hash":"b20e716ff7c275a7deb46fd02dbed68c37744efd","modified":1501650798209},{"_id":"public/images/9.png","hash":"56972ae9bd13296ef500372e8369b5d9392d2548","modified":1501650798225},{"_id":"public/images/11.png","hash":"5affe2cb79f33ec105e818bf1da8ac22c9a4f0ec","modified":1501650798225},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1501650798225},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1501650798225},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1501650798234},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1501650798234},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1501650798234},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1501650798234},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1501650798234},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1501650798234},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1501650798234},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1501650798234},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1501650798234},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1501650798234},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1501650798234},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1501650798234},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1501650798234},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1501650798234},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1501650798234},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1501650798234},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1501650798234},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1501650798234},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1501650798234},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1501650798234},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1501650798234},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1501650798234},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1501650798234},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1501650798234},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1501650798234},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1501650798235},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1501650798235},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1501650798235},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1501650798235},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1501650798235},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1501650798235},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1501650798235},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1501650798235},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1501650798235},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1501650798235},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1501650798235},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1501650798235},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1501650798235},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1501650798235},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1501650798235},{"_id":"public/css/main.css","hash":"3945a6ba10dc5631b98d6592019db7735c64e522","modified":1501650798235},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1501650798235},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1501650798235},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1501650798235},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1501650798235},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1501650798236},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1501650798236},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1501650798236},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1501650798236},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1501650798236},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1501650798236},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1501650798236},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501650798236},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1501650798236},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1501650798236},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1501650798236},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1501650798236},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1501650798236},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1501650798236},{"_id":"public/images/10.png","hash":"01374730bacf0dffd851b19ea4c8b926e75d7731","modified":1501650798236},{"_id":"public/images/2.png","hash":"7674001a9bd62997db75046ade07bc5ef57238fd","modified":1501650798237},{"_id":"public/images/3.png","hash":"e95b94e9404f2beae198bbf0c2a6d9db984c1532","modified":1501650798237},{"_id":"public/images/7.png","hash":"072d59be4d665f35fa763838a9033237cc54bafe","modified":1501650798237},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1501650798238},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1501650798238},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1501650798238},{"_id":"public/images/1.png","hash":"eda9ec3471af7110f42fab0178ba68d099ba6b27","modified":1501650798251},{"_id":"public/images/8.png","hash":"5966c840b60f72eb8a3e764b60ff1633fc3b712e","modified":1501650798253},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1501650798261},{"_id":"public/images/cover.png","hash":"ad34d668bcf94703a340ec40d779a54e45cecbc7","modified":1501650798264}],"Category":[],"Data":[],"Page":[{"title":"","date":"2016-12-09T05:26:27.000Z","_content":"####  个人信息\n\n\n   ","source":"about/index.md","raw":"---\ntitle: ''\ndate: 2016-12-09 13:26:27\n---\n####  个人信息\n\n\n   ","updated":"2017-04-19T13:01:19.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj5uk41yj00018512b812z5mi","content":"<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h4>"},{"title":"tags","date":"2016-12-09T05:26:59.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-09 13:26:59\ntype: 'tags'\ncomments: false\n---\n","updated":"2017-04-19T13:01:19.000Z","path":"tags/index.html","layout":"page","_id":"cj5uk423e000d8512baiuzrf4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Nodejs 技术栈之Web框架的研究与应用","date":"2017-03-10T07:02:57.000Z","_content":"### Nodejs 技术栈之Web框架的研究与应用\n\n@(Nodejs)[express|koa|egg]\n\n-------------------\n[TOC]\n\n#### 1.引言\nNodejs是一种基于事件驱动的服务端javascript。目前基于nodejs的web框架有很多，可以提供一系列强大的特性来帮助我们创建各种web应用及丰富的HTTP工具。现有的框架中，express、koa、egg应用比较广泛，而这三种框架之间又存在很大的差异。因此，本文将从框架自身的角度由表及里的来分析研究三者的优劣性及原理。最后结合实际代码，来进行进一步剖析。\n> express：express 是 node 社区广泛使用的框架，简单且扩展性强，非常适合做个人项目。但框架本身缺少约定。\n\n>koa：koa.js 是下一代的node.js框架，由Express团队开发，通过生成器（generators JavaScript 1.7新引入的，用于解决回调嵌套的方案），减少异步回调，提高代码的可读性和可维护性，同时改进了错误处理。\nkoa 的先天优势在于 generator，带来的主要好处如下：\n更优雅、简单、安全的中间件机制，后面章节会详细说明\n更优雅、简单的异常处理\n更优雅、简单的异步编程方式\n\n>egg：egg 为企业级框架和应用而生，可以帮助开发团队和开发人员降低开发和维护成本。egg继承于koa，而egg 选择了 koa 作为其基础框架，在它的模型基础上，进一步对它进行了一些增强。\n特性：\n      深度框架定制\n      高度可扩展的插件机制\n      内置多进程管理\n      基于 koa 开发，性能优异\n      框架稳定，测试覆盖率高\n      渐进式开发\n\n#### 2.中间件\nkoa与express最大的不同之处在于中间件的加载方式不一样。koa是基于洋葱模型来加载的，而express是从上到下依次加载，首先装入的中间件函数也首先被执行。\n```javascript\n-------------------express----------------\nvar express = require('express');\nvar app = express();\nvar myLogger = function (req, res, next) {\n  console.log('LOGGED');\n  next();\n};\napp.use(myLogger);\n// 打印hello，world\napp.get('/', function(req,res){\n    console.log('主页请求')；\n    res.send('hello world');\n});\n// app.use(myLogger);  如果放在app.get()之后呢？\napp.listen(3000);\n```\n在学习koa中间件之前，我们需要弄清什么，有哪些问题。\n- koa 的中间件机制是如何实现？\n- 为什么中间件必须是 generator function？\n- next 实参指向是什么？为什么可以通过 yield next 可以执行下一个中间件？\n- 为什么中间件从上到下执行完后，可以从下到上执行 yield next 后的逻辑？\n\nkoa洋葱模型：\n![](../images/22.jpg)\n\n```javascript\n//请思考下面的打印结果是什么\nvar app = koa();\napp.use(function *(next){\n    this.body = '1';\n    yield next;\n    this.body += '5';\n    console.log(this.body);\n});\napp.use(function *(next){\n    this.body += '2';\n    yield next;\n    this.body += '4';\n});\napp.use(function *(next){\n    this.body += '3';\n});\napp.listen(3000);\n```\n如果不用var app ＝ koa()这个封装好的框架中间件，怎么模拟出它执行的机制？\n\n```javascript\nvar co = require('co');//什么是co？后面将做解析\nfunction NewKoa(){\n    this.middlewares = [];\n}\nNewKoa.prototype = {\n    //注入个中间件\n    use: function(generatorFn){\n        this.middlewares.push(generatorFn);\n    },\n    //执行中间件\n    listen: function(){ //app.listen(3000)  实际就是调用这里\n        this._run();\n    },\n    _run: function(){\n        var ctx = this;\n        var middlewares = ctx.middlewares;\n        return co(function *(){\n            var prev = null;\n            var i = middlewares.length;\n            //从最后一个中间件到第一个中间件的顺序开始遍历\n            while (i--) ｛\n                //prev 将前面一个中间件传递给当前中间件\n                prev = middlewares[i].call(ctx, prev);\n            }\n            //执行第一个中间件\n            yield prev;\n        })();\n    }\n};\nvar app = new NewKoa();\n....\n```\n egg 是基于 koa 1 实现的，所以 egg 的中间件形式和 koa 的中间件形式是一样的，都是基于 generator function 的洋葱圈模型，因而在此不做说明。\n \n#### 3.路由\n在nodejs中，当我们建立了http请求后，需要建立路由来确定谁来响应客户端的请求。在HTTP请求中，我们可以通过路由来提取请求的url及get/post参数。\n通常情况下，创建服务需要使用require来载入http模块，并将实例化的http赋值。\n##### nodejs 服务实例\n```javascript\nvar http = require('http');\nvar server = http.createServer(function(req,res){\n  req.writeHead(200,{'Content-Type': 'text/plain'});\n  res.end('hello world');\n});\nserver.listen(3000);\n```\n#####  express 的路由\n```javascript\nvar express = require('express');\nvar app = express();\n// 打印hello，world\napp.get('/', function(req,res){\n    console.log('主页请求')；\n    res.send('hello world');\n})\n// 打印about\napp.get('/about', function (req, res) {\n  res.send('about');\n});\napp.listen(3000,function(){\n  console.log('server is start on 3000...');\n});\n```\n##### koa路由\n所有的koa中间件，必须是 generator function ，即 function *(){} 语法。后面章节进行介绍。\n```javascript\n//简单路由\nvar koa = require('koa');\nvar app = koa();\n// koa 是通过 app.use注入来加载中间件的\napp.use(function *(){\n    var path = this.path;\n    this.body = path; //打印当前请求路径\n});\napp.listen(3000);\n\n//可以注入多个中间件，koa 会从上到下加载，然后从下到上执行，关于中间件的执行顺序问题下一章进行分析\napp.use(function *(next){ \n    this.demo = 'test text';\n    yield next;//跳到下一个中间件\n});\n\napp.use(function *(){\n    this.body = this.demo; // 打印test text\n});\napp.listen(3000);\n// 引入路由中间件的写法\nvar router = require('koa-router');\napp.use(router(app));\napp.get('/', function *(next) {\n    //我是首页\n    //this 指向请求\n});\n\n//param()法，用于路由的参数处理,当访问 /detail/:id 路由时，会先执行定义的 generator逻辑。\napp.param('id',function *(id,next){\n    this.id = Number(id);\n    if ( typeof this.id != 'number') return this.status = 404;\n    yield next;\n}).get('/detail/:id', function *(next) {\n    //我是详情页面\n    var id = this.id; //123\n    this.body = id;\n});\n\n```\n\n##### egg路由\negg是基于koa框架开发的，其路由是通过描述请求的url及承担的执行动作controller来实现的，框架中约定了app/router.js文件用于统一所有的路由规则。\n```javascript\n// app/router.js\nmodule.exports = app => {\napp.get('/user/:id', 'user.info');\n};\n// app/controller/user.js\nexports.info = function* () {\n  this.body = {\n    name: `hello ${this.params.id}`,\n  };\n};\n```\n#### 4.高级\n本章节主要是讲解node中一些比较重要的理论，回调地狱，es6 promise -> generator -> co 以及nodejs框架的异常错误处理方式。\n##### callback hell \n>Node.js 本身是单线程的，但通过其异步加载的特性可以实现任务以并行的方式进行。当业务逻辑复杂的时候，回调的嵌套过多，代码复杂度增加，可读性降低，维护起来也复杂，调试也复杂，就会造成回调地狱。\n\n```javascript\nasyncFun1(function(err, a) {\n    if (err){\n    callback(err);\n  }\n    asyncFun2(function(err, b) {\n        if (err){\n        callback(err);\n      }\n        asyncFun3(function(err, c) {\n           if (err){\n          callback(err);\n        }\n        });\n    });\n});\n```\nJS的回调让我们可以很轻易的写出异步执行的代码，而缺点也是由异步引起的，当太多的异步步骤需要一步一步执行，或者一个函数里有太多的异步操作，这时候就会产生大量嵌套的回调，使代码嵌套太深而难以阅读和维护。\n>问题：那怎么改进？\n\n方法1：具名函数  --使用具名函数并保持代码层级不要太深\n```javascript\nfunction fun3(err, c) {\n  // 在函数3中处理c\n}\nfunction fun2(err, b) {\n  // 在函数2中处理b\n    asyncFun3(fun3);\n}\nfunction fun1(err, a) {   \n  // 在函数1中处理a\n    asyncFun2(fun2);\n}\nasyncFun1(fun1);\n\n```\n方法2：Anync \n```javascript\nasync.series([\n    function(callback) {\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback) {\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results) {\n    // results is now equal to ['one', 'two']\n});\n```\n方法3：Promise --虽然没有了嵌套，还是需要不少的回调\n```javascript\nasyncFun1().then(function(a) {\n    // do something with a in function 1\n    asyncFun2();\n}).then(function(b) {\n    // do something with b in function 2\n    asyncFun3();\n}).then(function(c) {\n    // do somethin with c in function 3\n});\n```\nPromise对象有以下两个特点。\n（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n\n>问题还有没有更好的方法？\n\n##### generator\nES6新特性中带来了新一代解决回调地狱的神器：Generator，同时generator 也是 koa 的基础，想要用好 koa 离不开对 generator 的理解。那么什么是generator？\nGenerator是一种方便按照某种规则生成元素的迭代器，不过鉴于其特殊的语法和运行原理，可以通过某种方式写出同步化的异步代码，从而避免回调。\n```javascript\nvar r = 3;\nfunction* genfn(a) {\n    for( var i = 0; i < 3 ; i++) {\n        a = a + r ;\n        yield a;\n    }\n}\n\nvar sum = genfn(5);\n\nconsole.log(sum.next()); // returns { value : 8, done : false }\nconsole.log(sum.next()); // returns { value : 11, done: false }\nconsole.log(sum.next()); // returns { value : 14, done: false }\nconsole.log(sum.next()); //return { value: undefined, done: true }\n```\n函数genfn 定义了一个执行3次的循环，每次执行，给a变量加3。\nyield a 会暂停执行并保存当前堆栈，返回当前的a。\n 与普通函数不同，generator只会定义遍历器，而不会执行，每次调用这个遍历器的next方法，就从函数体的头部或者上一次停下来的地方开始执行，直到遇到下一个yield语句为止。\n \n##### co\nco是什么？\nco 函数库是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。\n\n前面说过，Generator 函数就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。使用 co 的前提条件是，Generator 函数的 yield 命令后面，只能是 Thunk 函数或 Promise 对象。\n```javascript\n// 利用Generator 函数，依次读取两个文件。\nvar co = require('co');\nvar fs = require('fs');\n\nfunction read(file) {\n  return function(fn){\n    fs.readFile(file, 'utf8', fn);\n  }\n}\nco(function *(){//generator 函数只要传入 co 函数，就会自动执行\n\n  var a = yield read('.gitignore');//读取文件1\n  console.log(a.length);\n\n  var b = yield read('package.json');//读取文件2\n  console.log(b.length);\n}).then(function(){\nconsole.log('执行完毕')//co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。\n});\n```\nco 要求所有的异步函数必须是偏函数，称之为 thunk :\n```javascript\nfunction read(file) {\n  return function(fn){\n    fs.readFile(file, 'utf8', fn);\n  }\n}\n```\n对实现原理感兴趣的可以阅读其源码：https://github.com/tj/co/blob/master/index.js\n\nco的嵌套使用：（并发的异步操作）\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。只要把并发的操作都放在数组或对象里面。\n```javascript\n// 数组的写法\nco(function* () {\n  var res = yield [\n    Promise.resolve(1),\n    Promise.resolve(2)\n  ];\n  console.log(res); \n}).catch(onerror);\n\n// 对象的写法\nco(function* () {\n  var res = yield {\n    1: Promise.resolve(1),\n    2: Promise.resolve(2),\n  };\n  console.log(res); \n}).catch(onerror);\n```\n##### error\n在 Node.js 中，错误处理的方法主要有下面几种：\n\n和其他同步语言类似的 throw / try / catch 方法\ncallback(err, data) 回调形式\n通过 EventEmitter 触发一个 error 事件\n\n错误处理是应用健壮性非常重要的一部分，koa 在错误处理的便利上比 express 好非常多。koa 有 error 事件，当发生错误时，可以通过该事件，对错误进行统一的处理。\n```javascript\n//express\napp.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\n//koa\nconst fs = require('fs');\nconst Promise = require('bluebird');\n\nlet filename = '/nonexists';\nlet statAsync = Promise.promisify(fs.stat);\ntry {\n  yield statAsync(filename);\n} catch(e) {\n  // error here\n}\n```\nkoa 自定义中间件 统一的错误处理\n```javascript\napp.use(function* (next) {\n  try {\n    yield* next;\n  } catch(e) {\n    let status = e.status || 500;\n    let message = e.message || '服务器错误';\n\n    if (e instanceof JsonError) { // 错误是 json 错误\n      this.body = {\n        'status': status,\n        'message': message\n      };\n      if (status == 500) { \n        // 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log\n        this.app.emit('error', e, this);\n      }\n      return;\n    }\n    \n    this.status = status;\n    // 根据 status 渲染不同的页面\n    if (status == 403) {\n      this.body = yield this.render('403.html', {'err': e});\n    }\n    if (status == 404) {\n      this.body = yield this.render('404.html', {'err': e});\n    }\n    if (status == 500) {\n      this.body = yield this.render('500.html', {'err': e});\n      // 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log\n      this.app.emit('error', e, this);\n    }\n  }\n});\n```\negg\n```javascript\ntry {\n  const res = yield this.ctx.curl('http://eggjs.com/api/echo', { dataType: 'json' });\n  if (res.status !== 200) throw new Error('response status is not 200');\n  return res.data;\n} catch (err) {\n  this.logger.error(err);\n  return {};\n}\n```\n##### node process\nnodejs代码是单线程的，一个 node 进程只能运行在一个 CPU 上。那么如果用 node 来做 web server，就无法享受到多核运算的好处。\n>如何利用上多核 CPU 的并发优势？\n\n- 同时启动多个进程。\n\nnodejs 提供了child_process 模块来创建子进程，方法有 exec、spawn、fork三种。\n\n1. exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。\n2. spawn 使用指定的命令行参数创建新进程。\n3. fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork('./son.js') 相当于 spawn('node', ['./son.js']) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。\n\n实例：\n```javascript\n//worker.js\nconsole.log(\"进程 \" + process.argv[2] + \" 执行。\" );\n\n//master.js\nconst fs = require('fs');\nconst child_process = require('child_process');\n\nfor(var i=0; i<3; i++) {\n   var workerProcess = child_process.exec('node support.js '+i,\n      function (error, stdout, stderr) {\n         if (error) {\n            console.log(error.stack);\n         }\n         console.log('stdout: ' + stdout);\n         console.log('stderr: ' + stderr);\n      });\n      workerProcess.on('exit', function (code) {\n      console.log('子进程已退出，退出码 '+code);\n   });\n}\n```\n执行结果：\n```\n node master.js \n子进程已退出，退出码 0\nstdout: 进程 1 执行。\n\nstderr: \n子进程已退出，退出码 0\nstdout: 进程 0 执行。\n\nstderr: \n子进程已退出，退出码 0\nstdout: 进程 2 执行。\n\nstderr: \n```\n- EGG中的多进程模型\n在服务器上同时启动多个进程。\n每个进程里都跑的是同一份源代码（好比把以前一个进程的工作分给多个进程去做）。\n这些进程可以同时监听一个端口\n```javascript\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\nif (cluster.isMaster) {\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n  cluster.on('exit', function(worker, code, signal) {\n    console.log('worker ' + worker.process.pid + ' died');\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n  }).listen(8000);\n}\n```\n\n#### 5.应用\n express + swig\n```javascript\n//nodejs server.js\nvar app = require(\"express\")(),\n    serveStatic = require('serve-static'),\n    bodyParser = require('body-parser'),\n    swig = require('swig'),\n    session = require('express-session'),\n    ueditor = require(\"ueditor-nodejs\"),\n    path = require('path');\n\nvar userRouter = require(\"./backend/router/userRouter\"),\n    registerRouter = require(\"./backend/router/registerRouter\"),\n    signinRouter = require(\"./backend/router/signinRouter\"),\n    orderRouter = require(\"./backend/router/orderRouter\"),\n    paperRouter = require(\"./backend/router/PaperShare\"),\n    uploadRouter = require(\"./backend/router/UploadRouter\"),\n    articleRouter = require(\"./backend/router/articleRouter\");\n\nvar allowCrossDomain = function(req, res, next) {\n  //console.log(\"get request!\");\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  //res.header('Access-Control-Allow-Credentials',true);\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  next();\n};\n\nswig.setDefaults({\n  cache: false\n});\n\n// var swig2 = new swig.Swig();\napp.engine('html', swig.renderFile);\napp.set('view engine', 'html');\napp.set('views', './templates')\n\napp.use(log('dev'));\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\n\napp.use(allowCrossDomain);\n// app.use('/admin',checkUser);\napp.use(serveStatic('public'));\n\napp.use(function (req, res, next) {\n  console.log('filter session.user is ',req.session.user);\n  if (req.session.user){\n    res.locals.currentUser = req.session.user;\n  }\n  next();\n});\n\napp.use('/user', userRouter);\napp.use('/regist',registerRouter);\napp.use('/signin',signinRouter);\napp.use('/order',orderRouter);\napp.use('/paper',paperRouter);\napp.use('/upload',uploadRouter);\napp.use('/article',articleRouter);\n\n// Swig will cache templates for you, but you can disable\n// that and use Express's caching instead, if you like:\napp.set('view cache', false);\n//welcome index 首页\napp.get('/', function(req, res) {\n  //res.redirect(\"./admin\");\n  res.render('index',{user:req.session.user})\n});\n\napp.listen(18080, function() {\n  logger.log(\"connect successful! Listen 18080!\");\n});\n\n```\n\n koa + xtml \n\n```javascript\n//node app.js\nvar debug = require('debug')('koa-example');\nvar koa = require('koa');\n//配置文件\nvar config = require('./config/config');\n\nvar app = koa();\napp.use(function *(next){\n    //config 注入中间件，方便调用配置信息\n    if(!this.config){\n        this.config = config;\n    }\n    yield next;\n});\n\n//log记录\nvar Logger = require('mini-logger');\nvar logger = Logger({\n    dir: config.logDir,\n    format: 'YYYY-MM-DD-[{category}][.log]'\n});\n\n//router use : this.logger.error(new Error(''))\napp.context.logger = logger;\n\nvar onerror = require('koa-onerror');\nonerror(app);\n\n//xtemplate对koa的适配\nvar xtplApp = require('xtpl/lib/koa');\n//xtemplate模板渲染\nxtplApp(app,{\n    //配置模板目录\n    views: config.viewDir\n});\nvar session = require('koa-session');\napp.use(session(app));\n\n//post body 解析\nvar bodyParser = require('koa-bodyparser');\napp.use(bodyParser());\n//数据校验\nvar validator = require('koa-validator');\napp.use(validator());\n\n//静态文件cache\nvar staticCache = require('koa-static-cache');\nvar staticDir = config.staticDir;\napp.use(staticCache(staticDir+'/js'));\napp.use(staticCache(staticDir+'/css'));\n\n//路由\nvar router = require('koa-router');\napp.use(router(app));\n\n//应用路由\nvar appRouter = require('./router/index');\nappRouter(app);\napp.listen(config.port);\n\nconsole.log('listening on port %s',config.port);\n```\n#### 6.总结\n\nkoa 与 express 是共享底层库的，本身先天优势在于 generator。koa和express在表现上的一点不同是采用ctx一个参数来调用中间件，而不是express的req, res。express的设计是串联的，设计思路很简洁。而koa的某一个中间件可以自行选择之后中间件的执行位置的。路由的设计上也不一样。express是通过router，而koa是通过中间价加载的方式来统一跳转路径。\n\nEgg自己做了一套进程管理机制，采用微核 + 插件体系，本身大部分功能由插件提供，高度灵活，功能强大。egg 的设计机制，旨在遵循同一套规范的同时，完美的达成生态共建和差异化定制的平衡点。\n\n![](../images/111.jpg)\n\n","source":"_posts/Nodejs-技术栈之Web框架的研究与应用.md","raw":"---\ntitle: Nodejs 技术栈之Web框架的研究与应用\ndate: 2017-03-10 15:02:57\ntags: NodeJs\n---\n### Nodejs 技术栈之Web框架的研究与应用\n\n@(Nodejs)[express|koa|egg]\n\n-------------------\n[TOC]\n\n#### 1.引言\nNodejs是一种基于事件驱动的服务端javascript。目前基于nodejs的web框架有很多，可以提供一系列强大的特性来帮助我们创建各种web应用及丰富的HTTP工具。现有的框架中，express、koa、egg应用比较广泛，而这三种框架之间又存在很大的差异。因此，本文将从框架自身的角度由表及里的来分析研究三者的优劣性及原理。最后结合实际代码，来进行进一步剖析。\n> express：express 是 node 社区广泛使用的框架，简单且扩展性强，非常适合做个人项目。但框架本身缺少约定。\n\n>koa：koa.js 是下一代的node.js框架，由Express团队开发，通过生成器（generators JavaScript 1.7新引入的，用于解决回调嵌套的方案），减少异步回调，提高代码的可读性和可维护性，同时改进了错误处理。\nkoa 的先天优势在于 generator，带来的主要好处如下：\n更优雅、简单、安全的中间件机制，后面章节会详细说明\n更优雅、简单的异常处理\n更优雅、简单的异步编程方式\n\n>egg：egg 为企业级框架和应用而生，可以帮助开发团队和开发人员降低开发和维护成本。egg继承于koa，而egg 选择了 koa 作为其基础框架，在它的模型基础上，进一步对它进行了一些增强。\n特性：\n      深度框架定制\n      高度可扩展的插件机制\n      内置多进程管理\n      基于 koa 开发，性能优异\n      框架稳定，测试覆盖率高\n      渐进式开发\n\n#### 2.中间件\nkoa与express最大的不同之处在于中间件的加载方式不一样。koa是基于洋葱模型来加载的，而express是从上到下依次加载，首先装入的中间件函数也首先被执行。\n```javascript\n-------------------express----------------\nvar express = require('express');\nvar app = express();\nvar myLogger = function (req, res, next) {\n  console.log('LOGGED');\n  next();\n};\napp.use(myLogger);\n// 打印hello，world\napp.get('/', function(req,res){\n    console.log('主页请求')；\n    res.send('hello world');\n});\n// app.use(myLogger);  如果放在app.get()之后呢？\napp.listen(3000);\n```\n在学习koa中间件之前，我们需要弄清什么，有哪些问题。\n- koa 的中间件机制是如何实现？\n- 为什么中间件必须是 generator function？\n- next 实参指向是什么？为什么可以通过 yield next 可以执行下一个中间件？\n- 为什么中间件从上到下执行完后，可以从下到上执行 yield next 后的逻辑？\n\nkoa洋葱模型：\n![](../images/22.jpg)\n\n```javascript\n//请思考下面的打印结果是什么\nvar app = koa();\napp.use(function *(next){\n    this.body = '1';\n    yield next;\n    this.body += '5';\n    console.log(this.body);\n});\napp.use(function *(next){\n    this.body += '2';\n    yield next;\n    this.body += '4';\n});\napp.use(function *(next){\n    this.body += '3';\n});\napp.listen(3000);\n```\n如果不用var app ＝ koa()这个封装好的框架中间件，怎么模拟出它执行的机制？\n\n```javascript\nvar co = require('co');//什么是co？后面将做解析\nfunction NewKoa(){\n    this.middlewares = [];\n}\nNewKoa.prototype = {\n    //注入个中间件\n    use: function(generatorFn){\n        this.middlewares.push(generatorFn);\n    },\n    //执行中间件\n    listen: function(){ //app.listen(3000)  实际就是调用这里\n        this._run();\n    },\n    _run: function(){\n        var ctx = this;\n        var middlewares = ctx.middlewares;\n        return co(function *(){\n            var prev = null;\n            var i = middlewares.length;\n            //从最后一个中间件到第一个中间件的顺序开始遍历\n            while (i--) ｛\n                //prev 将前面一个中间件传递给当前中间件\n                prev = middlewares[i].call(ctx, prev);\n            }\n            //执行第一个中间件\n            yield prev;\n        })();\n    }\n};\nvar app = new NewKoa();\n....\n```\n egg 是基于 koa 1 实现的，所以 egg 的中间件形式和 koa 的中间件形式是一样的，都是基于 generator function 的洋葱圈模型，因而在此不做说明。\n \n#### 3.路由\n在nodejs中，当我们建立了http请求后，需要建立路由来确定谁来响应客户端的请求。在HTTP请求中，我们可以通过路由来提取请求的url及get/post参数。\n通常情况下，创建服务需要使用require来载入http模块，并将实例化的http赋值。\n##### nodejs 服务实例\n```javascript\nvar http = require('http');\nvar server = http.createServer(function(req,res){\n  req.writeHead(200,{'Content-Type': 'text/plain'});\n  res.end('hello world');\n});\nserver.listen(3000);\n```\n#####  express 的路由\n```javascript\nvar express = require('express');\nvar app = express();\n// 打印hello，world\napp.get('/', function(req,res){\n    console.log('主页请求')；\n    res.send('hello world');\n})\n// 打印about\napp.get('/about', function (req, res) {\n  res.send('about');\n});\napp.listen(3000,function(){\n  console.log('server is start on 3000...');\n});\n```\n##### koa路由\n所有的koa中间件，必须是 generator function ，即 function *(){} 语法。后面章节进行介绍。\n```javascript\n//简单路由\nvar koa = require('koa');\nvar app = koa();\n// koa 是通过 app.use注入来加载中间件的\napp.use(function *(){\n    var path = this.path;\n    this.body = path; //打印当前请求路径\n});\napp.listen(3000);\n\n//可以注入多个中间件，koa 会从上到下加载，然后从下到上执行，关于中间件的执行顺序问题下一章进行分析\napp.use(function *(next){ \n    this.demo = 'test text';\n    yield next;//跳到下一个中间件\n});\n\napp.use(function *(){\n    this.body = this.demo; // 打印test text\n});\napp.listen(3000);\n// 引入路由中间件的写法\nvar router = require('koa-router');\napp.use(router(app));\napp.get('/', function *(next) {\n    //我是首页\n    //this 指向请求\n});\n\n//param()法，用于路由的参数处理,当访问 /detail/:id 路由时，会先执行定义的 generator逻辑。\napp.param('id',function *(id,next){\n    this.id = Number(id);\n    if ( typeof this.id != 'number') return this.status = 404;\n    yield next;\n}).get('/detail/:id', function *(next) {\n    //我是详情页面\n    var id = this.id; //123\n    this.body = id;\n});\n\n```\n\n##### egg路由\negg是基于koa框架开发的，其路由是通过描述请求的url及承担的执行动作controller来实现的，框架中约定了app/router.js文件用于统一所有的路由规则。\n```javascript\n// app/router.js\nmodule.exports = app => {\napp.get('/user/:id', 'user.info');\n};\n// app/controller/user.js\nexports.info = function* () {\n  this.body = {\n    name: `hello ${this.params.id}`,\n  };\n};\n```\n#### 4.高级\n本章节主要是讲解node中一些比较重要的理论，回调地狱，es6 promise -> generator -> co 以及nodejs框架的异常错误处理方式。\n##### callback hell \n>Node.js 本身是单线程的，但通过其异步加载的特性可以实现任务以并行的方式进行。当业务逻辑复杂的时候，回调的嵌套过多，代码复杂度增加，可读性降低，维护起来也复杂，调试也复杂，就会造成回调地狱。\n\n```javascript\nasyncFun1(function(err, a) {\n    if (err){\n    callback(err);\n  }\n    asyncFun2(function(err, b) {\n        if (err){\n        callback(err);\n      }\n        asyncFun3(function(err, c) {\n           if (err){\n          callback(err);\n        }\n        });\n    });\n});\n```\nJS的回调让我们可以很轻易的写出异步执行的代码，而缺点也是由异步引起的，当太多的异步步骤需要一步一步执行，或者一个函数里有太多的异步操作，这时候就会产生大量嵌套的回调，使代码嵌套太深而难以阅读和维护。\n>问题：那怎么改进？\n\n方法1：具名函数  --使用具名函数并保持代码层级不要太深\n```javascript\nfunction fun3(err, c) {\n  // 在函数3中处理c\n}\nfunction fun2(err, b) {\n  // 在函数2中处理b\n    asyncFun3(fun3);\n}\nfunction fun1(err, a) {   \n  // 在函数1中处理a\n    asyncFun2(fun2);\n}\nasyncFun1(fun1);\n\n```\n方法2：Anync \n```javascript\nasync.series([\n    function(callback) {\n        // do some stuff ...\n        callback(null, 'one');\n    },\n    function(callback) {\n        // do some more stuff ...\n        callback(null, 'two');\n    }\n],\n// optional callback\nfunction(err, results) {\n    // results is now equal to ['one', 'two']\n});\n```\n方法3：Promise --虽然没有了嵌套，还是需要不少的回调\n```javascript\nasyncFun1().then(function(a) {\n    // do something with a in function 1\n    asyncFun2();\n}).then(function(b) {\n    // do something with b in function 2\n    asyncFun3();\n}).then(function(c) {\n    // do somethin with c in function 3\n});\n```\nPromise对象有以下两个特点。\n（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。\n\n>问题还有没有更好的方法？\n\n##### generator\nES6新特性中带来了新一代解决回调地狱的神器：Generator，同时generator 也是 koa 的基础，想要用好 koa 离不开对 generator 的理解。那么什么是generator？\nGenerator是一种方便按照某种规则生成元素的迭代器，不过鉴于其特殊的语法和运行原理，可以通过某种方式写出同步化的异步代码，从而避免回调。\n```javascript\nvar r = 3;\nfunction* genfn(a) {\n    for( var i = 0; i < 3 ; i++) {\n        a = a + r ;\n        yield a;\n    }\n}\n\nvar sum = genfn(5);\n\nconsole.log(sum.next()); // returns { value : 8, done : false }\nconsole.log(sum.next()); // returns { value : 11, done: false }\nconsole.log(sum.next()); // returns { value : 14, done: false }\nconsole.log(sum.next()); //return { value: undefined, done: true }\n```\n函数genfn 定义了一个执行3次的循环，每次执行，给a变量加3。\nyield a 会暂停执行并保存当前堆栈，返回当前的a。\n 与普通函数不同，generator只会定义遍历器，而不会执行，每次调用这个遍历器的next方法，就从函数体的头部或者上一次停下来的地方开始执行，直到遇到下一个yield语句为止。\n \n##### co\nco是什么？\nco 函数库是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。\n\n前面说过，Generator 函数就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。使用 co 的前提条件是，Generator 函数的 yield 命令后面，只能是 Thunk 函数或 Promise 对象。\n```javascript\n// 利用Generator 函数，依次读取两个文件。\nvar co = require('co');\nvar fs = require('fs');\n\nfunction read(file) {\n  return function(fn){\n    fs.readFile(file, 'utf8', fn);\n  }\n}\nco(function *(){//generator 函数只要传入 co 函数，就会自动执行\n\n  var a = yield read('.gitignore');//读取文件1\n  console.log(a.length);\n\n  var b = yield read('package.json');//读取文件2\n  console.log(b.length);\n}).then(function(){\nconsole.log('执行完毕')//co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。\n});\n```\nco 要求所有的异步函数必须是偏函数，称之为 thunk :\n```javascript\nfunction read(file) {\n  return function(fn){\n    fs.readFile(file, 'utf8', fn);\n  }\n}\n```\n对实现原理感兴趣的可以阅读其源码：https://github.com/tj/co/blob/master/index.js\n\nco的嵌套使用：（并发的异步操作）\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。只要把并发的操作都放在数组或对象里面。\n```javascript\n// 数组的写法\nco(function* () {\n  var res = yield [\n    Promise.resolve(1),\n    Promise.resolve(2)\n  ];\n  console.log(res); \n}).catch(onerror);\n\n// 对象的写法\nco(function* () {\n  var res = yield {\n    1: Promise.resolve(1),\n    2: Promise.resolve(2),\n  };\n  console.log(res); \n}).catch(onerror);\n```\n##### error\n在 Node.js 中，错误处理的方法主要有下面几种：\n\n和其他同步语言类似的 throw / try / catch 方法\ncallback(err, data) 回调形式\n通过 EventEmitter 触发一个 error 事件\n\n错误处理是应用健壮性非常重要的一部分，koa 在错误处理的便利上比 express 好非常多。koa 有 error 事件，当发生错误时，可以通过该事件，对错误进行统一的处理。\n```javascript\n//express\napp.use(function(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something broke!');\n});\n\n//koa\nconst fs = require('fs');\nconst Promise = require('bluebird');\n\nlet filename = '/nonexists';\nlet statAsync = Promise.promisify(fs.stat);\ntry {\n  yield statAsync(filename);\n} catch(e) {\n  // error here\n}\n```\nkoa 自定义中间件 统一的错误处理\n```javascript\napp.use(function* (next) {\n  try {\n    yield* next;\n  } catch(e) {\n    let status = e.status || 500;\n    let message = e.message || '服务器错误';\n\n    if (e instanceof JsonError) { // 错误是 json 错误\n      this.body = {\n        'status': status,\n        'message': message\n      };\n      if (status == 500) { \n        // 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log\n        this.app.emit('error', e, this);\n      }\n      return;\n    }\n    \n    this.status = status;\n    // 根据 status 渲染不同的页面\n    if (status == 403) {\n      this.body = yield this.render('403.html', {'err': e});\n    }\n    if (status == 404) {\n      this.body = yield this.render('404.html', {'err': e});\n    }\n    if (status == 500) {\n      this.body = yield this.render('500.html', {'err': e});\n      // 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log\n      this.app.emit('error', e, this);\n    }\n  }\n});\n```\negg\n```javascript\ntry {\n  const res = yield this.ctx.curl('http://eggjs.com/api/echo', { dataType: 'json' });\n  if (res.status !== 200) throw new Error('response status is not 200');\n  return res.data;\n} catch (err) {\n  this.logger.error(err);\n  return {};\n}\n```\n##### node process\nnodejs代码是单线程的，一个 node 进程只能运行在一个 CPU 上。那么如果用 node 来做 web server，就无法享受到多核运算的好处。\n>如何利用上多核 CPU 的并发优势？\n\n- 同时启动多个进程。\n\nnodejs 提供了child_process 模块来创建子进程，方法有 exec、spawn、fork三种。\n\n1. exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。\n2. spawn 使用指定的命令行参数创建新进程。\n3. fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork('./son.js') 相当于 spawn('node', ['./son.js']) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。\n\n实例：\n```javascript\n//worker.js\nconsole.log(\"进程 \" + process.argv[2] + \" 执行。\" );\n\n//master.js\nconst fs = require('fs');\nconst child_process = require('child_process');\n\nfor(var i=0; i<3; i++) {\n   var workerProcess = child_process.exec('node support.js '+i,\n      function (error, stdout, stderr) {\n         if (error) {\n            console.log(error.stack);\n         }\n         console.log('stdout: ' + stdout);\n         console.log('stderr: ' + stderr);\n      });\n      workerProcess.on('exit', function (code) {\n      console.log('子进程已退出，退出码 '+code);\n   });\n}\n```\n执行结果：\n```\n node master.js \n子进程已退出，退出码 0\nstdout: 进程 1 执行。\n\nstderr: \n子进程已退出，退出码 0\nstdout: 进程 0 执行。\n\nstderr: \n子进程已退出，退出码 0\nstdout: 进程 2 执行。\n\nstderr: \n```\n- EGG中的多进程模型\n在服务器上同时启动多个进程。\n每个进程里都跑的是同一份源代码（好比把以前一个进程的工作分给多个进程去做）。\n这些进程可以同时监听一个端口\n```javascript\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\nif (cluster.isMaster) {\n  // Fork workers.\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n  cluster.on('exit', function(worker, code, signal) {\n    console.log('worker ' + worker.process.pid + ' died');\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n  }).listen(8000);\n}\n```\n\n#### 5.应用\n express + swig\n```javascript\n//nodejs server.js\nvar app = require(\"express\")(),\n    serveStatic = require('serve-static'),\n    bodyParser = require('body-parser'),\n    swig = require('swig'),\n    session = require('express-session'),\n    ueditor = require(\"ueditor-nodejs\"),\n    path = require('path');\n\nvar userRouter = require(\"./backend/router/userRouter\"),\n    registerRouter = require(\"./backend/router/registerRouter\"),\n    signinRouter = require(\"./backend/router/signinRouter\"),\n    orderRouter = require(\"./backend/router/orderRouter\"),\n    paperRouter = require(\"./backend/router/PaperShare\"),\n    uploadRouter = require(\"./backend/router/UploadRouter\"),\n    articleRouter = require(\"./backend/router/articleRouter\");\n\nvar allowCrossDomain = function(req, res, next) {\n  //console.log(\"get request!\");\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  //res.header('Access-Control-Allow-Credentials',true);\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  next();\n};\n\nswig.setDefaults({\n  cache: false\n});\n\n// var swig2 = new swig.Swig();\napp.engine('html', swig.renderFile);\napp.set('view engine', 'html');\napp.set('views', './templates')\n\napp.use(log('dev'));\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\n\napp.use(allowCrossDomain);\n// app.use('/admin',checkUser);\napp.use(serveStatic('public'));\n\napp.use(function (req, res, next) {\n  console.log('filter session.user is ',req.session.user);\n  if (req.session.user){\n    res.locals.currentUser = req.session.user;\n  }\n  next();\n});\n\napp.use('/user', userRouter);\napp.use('/regist',registerRouter);\napp.use('/signin',signinRouter);\napp.use('/order',orderRouter);\napp.use('/paper',paperRouter);\napp.use('/upload',uploadRouter);\napp.use('/article',articleRouter);\n\n// Swig will cache templates for you, but you can disable\n// that and use Express's caching instead, if you like:\napp.set('view cache', false);\n//welcome index 首页\napp.get('/', function(req, res) {\n  //res.redirect(\"./admin\");\n  res.render('index',{user:req.session.user})\n});\n\napp.listen(18080, function() {\n  logger.log(\"connect successful! Listen 18080!\");\n});\n\n```\n\n koa + xtml \n\n```javascript\n//node app.js\nvar debug = require('debug')('koa-example');\nvar koa = require('koa');\n//配置文件\nvar config = require('./config/config');\n\nvar app = koa();\napp.use(function *(next){\n    //config 注入中间件，方便调用配置信息\n    if(!this.config){\n        this.config = config;\n    }\n    yield next;\n});\n\n//log记录\nvar Logger = require('mini-logger');\nvar logger = Logger({\n    dir: config.logDir,\n    format: 'YYYY-MM-DD-[{category}][.log]'\n});\n\n//router use : this.logger.error(new Error(''))\napp.context.logger = logger;\n\nvar onerror = require('koa-onerror');\nonerror(app);\n\n//xtemplate对koa的适配\nvar xtplApp = require('xtpl/lib/koa');\n//xtemplate模板渲染\nxtplApp(app,{\n    //配置模板目录\n    views: config.viewDir\n});\nvar session = require('koa-session');\napp.use(session(app));\n\n//post body 解析\nvar bodyParser = require('koa-bodyparser');\napp.use(bodyParser());\n//数据校验\nvar validator = require('koa-validator');\napp.use(validator());\n\n//静态文件cache\nvar staticCache = require('koa-static-cache');\nvar staticDir = config.staticDir;\napp.use(staticCache(staticDir+'/js'));\napp.use(staticCache(staticDir+'/css'));\n\n//路由\nvar router = require('koa-router');\napp.use(router(app));\n\n//应用路由\nvar appRouter = require('./router/index');\nappRouter(app);\napp.listen(config.port);\n\nconsole.log('listening on port %s',config.port);\n```\n#### 6.总结\n\nkoa 与 express 是共享底层库的，本身先天优势在于 generator。koa和express在表现上的一点不同是采用ctx一个参数来调用中间件，而不是express的req, res。express的设计是串联的，设计思路很简洁。而koa的某一个中间件可以自行选择之后中间件的执行位置的。路由的设计上也不一样。express是通过router，而koa是通过中间价加载的方式来统一跳转路径。\n\nEgg自己做了一套进程管理机制，采用微核 + 插件体系，本身大部分功能由插件提供，高度灵活，功能强大。egg 的设计机制，旨在遵循同一套规范的同时，完美的达成生态共建和差异化定制的平衡点。\n\n![](../images/111.jpg)\n\n","slug":"Nodejs-技术栈之Web框架的研究与应用","published":1,"updated":"2017-08-02T05:12:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uk41yf00008512mc1m7n19","content":"<h3 id=\"Nodejs-技术栈之Web框架的研究与应用\"><a href=\"#Nodejs-技术栈之Web框架的研究与应用\" class=\"headerlink\" title=\"Nodejs 技术栈之Web框架的研究与应用\"></a>Nodejs 技术栈之Web框架的研究与应用</h3><p>@(Nodejs)[express|koa|egg]</p>\n<hr>\n<p>[TOC]</p>\n<h4 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h4><p>Nodejs是一种基于事件驱动的服务端javascript。目前基于nodejs的web框架有很多，可以提供一系列强大的特性来帮助我们创建各种web应用及丰富的HTTP工具。现有的框架中，express、koa、egg应用比较广泛，而这三种框架之间又存在很大的差异。因此，本文将从框架自身的角度由表及里的来分析研究三者的优劣性及原理。最后结合实际代码，来进行进一步剖析。</p>\n<blockquote>\n<p>express：express 是 node 社区广泛使用的框架，简单且扩展性强，非常适合做个人项目。但框架本身缺少约定。</p>\n<p>koa：koa.js 是下一代的node.js框架，由Express团队开发，通过生成器（generators JavaScript 1.7新引入的，用于解决回调嵌套的方案），减少异步回调，提高代码的可读性和可维护性，同时改进了错误处理。<br>koa 的先天优势在于 generator，带来的主要好处如下：<br>更优雅、简单、安全的中间件机制，后面章节会详细说明<br>更优雅、简单的异常处理<br>更优雅、简单的异步编程方式</p>\n<p>egg：egg 为企业级框架和应用而生，可以帮助开发团队和开发人员降低开发和维护成本。egg继承于koa，而egg 选择了 koa 作为其基础框架，在它的模型基础上，进一步对它进行了一些增强。<br>特性：<br>      深度框架定制<br>      高度可扩展的插件机制<br>      内置多进程管理<br>      基于 koa 开发，性能优异<br>      框架稳定，测试覆盖率高<br>      渐进式开发</p>\n</blockquote>\n<h4 id=\"2-中间件\"><a href=\"#2-中间件\" class=\"headerlink\" title=\"2.中间件\"></a>2.中间件</h4><p>koa与express最大的不同之处在于中间件的加载方式不一样。koa是基于洋葱模型来加载的，而express是从上到下依次加载，首先装入的中间件函数也首先被执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">-------------------express----------------</div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> myLogger = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'LOGGED'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;;</div><div class=\"line\">app.use(myLogger);</div><div class=\"line\"><span class=\"comment\">// 打印hello，world</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'主页请求'</span>)；</div><div class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// app.use(myLogger);  如果放在app.get()之后呢？</span></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>在学习koa中间件之前，我们需要弄清什么，有哪些问题。</p>\n<ul>\n<li>koa 的中间件机制是如何实现？</li>\n<li>为什么中间件必须是 generator function？</li>\n<li>next 实参指向是什么？为什么可以通过 yield next 可以执行下一个中间件？</li>\n<li>为什么中间件从上到下执行完后，可以从下到上执行 yield next 后的逻辑？</li>\n</ul>\n<p>koa洋葱模型：<br><img src=\"../images/22.jpg\" alt=\"\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//请思考下面的打印结果是什么</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"string\">'1'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'5'</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.body);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'2'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'4'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'3'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>如果不用var app ＝ koa()这个封装好的框架中间件，怎么模拟出它执行的机制？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);<span class=\"comment\">//什么是co？后面将做解析</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NewKoa</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.middlewares = [];</div><div class=\"line\">&#125;</div><div class=\"line\">NewKoa.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//注入个中间件</span></div><div class=\"line\">    use: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">generatorFn</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.middlewares.push(generatorFn);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">//执行中间件</span></div><div class=\"line\">    listen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//app.listen(3000)  实际就是调用这里</span></div><div class=\"line\">        <span class=\"keyword\">this</span>._run();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _run: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> middlewares = ctx.middlewares;</div><div class=\"line\">        <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> prev = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = middlewares.length;</div><div class=\"line\">            <span class=\"comment\">//从最后一个中间件到第一个中间件的顺序开始遍历</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (i--) ｛</div><div class=\"line\">                <span class=\"comment\">//prev 将前面一个中间件传递给当前中间件</span></div><div class=\"line\">                prev = middlewares[i].call(ctx, prev);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//执行第一个中间件</span></div><div class=\"line\">            <span class=\"keyword\">yield</span> prev;</div><div class=\"line\">        &#125;)();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> NewKoa();</div><div class=\"line\">....</div></pre></td></tr></table></figure>\n<p> egg 是基于 koa 1 实现的，所以 egg 的中间件形式和 koa 的中间件形式是一样的，都是基于 generator function 的洋葱圈模型，因而在此不做说明。</p>\n<h4 id=\"3-路由\"><a href=\"#3-路由\" class=\"headerlink\" title=\"3.路由\"></a>3.路由</h4><p>在nodejs中，当我们建立了http请求后，需要建立路由来确定谁来响应客户端的请求。在HTTP请求中，我们可以通过路由来提取请求的url及get/post参数。<br>通常情况下，创建服务需要使用require来载入http模块，并将实例化的http赋值。</p>\n<h5 id=\"nodejs-服务实例\"><a href=\"#nodejs-服务实例\" class=\"headerlink\" title=\"nodejs 服务实例\"></a>nodejs 服务实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  req.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">  res.end(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"express-的路由\"><a href=\"#express-的路由\" class=\"headerlink\" title=\"express 的路由\"></a>express 的路由</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">// 打印hello，world</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'主页请求'</span>)；</div><div class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 打印about</span></div><div class=\"line\">app.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'about'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server is start on 3000...'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"koa路由\"><a href=\"#koa路由\" class=\"headerlink\" title=\"koa路由\"></a>koa路由</h5><p>所有的koa中间件，必须是 generator function ，即 function *(){} 语法。后面章节进行介绍。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//简单路由</span></div><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\"><span class=\"comment\">// koa 是通过 app.use注入来加载中间件的</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"keyword\">this</span>.path;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body = path; <span class=\"comment\">//打印当前请求路径</span></div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//可以注入多个中间件，koa 会从上到下加载，然后从下到上执行，关于中间件的执行顺序问题下一章进行分析</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">this</span>.demo = <span class=\"string\">'test text'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;<span class=\"comment\">//跳到下一个中间件</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.demo; <span class=\"comment\">// 打印test text</span></div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"comment\">// 引入路由中间件的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</div><div class=\"line\">app.use(router(app));</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//我是首页</span></div><div class=\"line\">    <span class=\"comment\">//this 指向请求</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//param()法，用于路由的参数处理,当访问 /detail/:id 路由时，会先执行定义的 generator逻辑。</span></div><div class=\"line\">app.param(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">id,next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = <span class=\"built_in\">Number</span>(id);</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.id != <span class=\"string\">'number'</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.status = <span class=\"number\">404</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">&#125;).get(<span class=\"string\">'/detail/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//我是详情页面</span></div><div class=\"line\">    <span class=\"keyword\">var</span> id = <span class=\"keyword\">this</span>.id; <span class=\"comment\">//123</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.body = id;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"egg路由\"><a href=\"#egg路由\" class=\"headerlink\" title=\"egg路由\"></a>egg路由</h5><p>egg是基于koa框架开发的，其路由是通过描述请求的url及承担的执行动作controller来实现的，框架中约定了app/router.js文件用于统一所有的路由规则。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/router.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"string\">'user.info'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// app/controller/user.js</span></div><div class=\"line\">exports.info = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.body = &#123;</div><div class=\"line\">    name: <span class=\"string\">`hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.params.id&#125;</span>`</span>,</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-高级\"><a href=\"#4-高级\" class=\"headerlink\" title=\"4.高级\"></a>4.高级</h4><p>本章节主要是讲解node中一些比较重要的理论，回调地狱，es6 promise -&gt; generator -&gt; co 以及nodejs框架的异常错误处理方式。</p>\n<h5 id=\"callback-hell\"><a href=\"#callback-hell\" class=\"headerlink\" title=\"callback hell\"></a>callback hell</h5><blockquote>\n<p>Node.js 本身是单线程的，但通过其异步加载的特性可以实现任务以并行的方式进行。当业务逻辑复杂的时候，回调的嵌套过多，代码复杂度增加，可读性降低，维护起来也复杂，调试也复杂，就会造成回调地狱。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">asyncFun1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err)&#123;</div><div class=\"line\">    callback(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">    asyncFun2(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err)&#123;</div><div class=\"line\">        callback(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">        asyncFun3(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, c</span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (err)&#123;</div><div class=\"line\">          callback(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>JS的回调让我们可以很轻易的写出异步执行的代码，而缺点也是由异步引起的，当太多的异步步骤需要一步一步执行，或者一个函数里有太多的异步操作，这时候就会产生大量嵌套的回调，使代码嵌套太深而难以阅读和维护。</p>\n<blockquote>\n<p>问题：那怎么改进？</p>\n</blockquote>\n<p>方法1：具名函数  –使用具名函数并保持代码层级不要太深<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun3</span>(<span class=\"params\">err, c</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在函数3中处理c</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\">err, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在函数2中处理b</span></div><div class=\"line\">    asyncFun3(fun3);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\">err, a</span>) </span>&#123;   </div><div class=\"line\">  <span class=\"comment\">// 在函数1中处理a</span></div><div class=\"line\">    asyncFun2(fun2);</div><div class=\"line\">&#125;</div><div class=\"line\">asyncFun1(fun1);</div></pre></td></tr></table></figure></p>\n<p>方法2：Anync<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.series([</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do some stuff ...</span></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'one'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do some more stuff ...</span></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'two'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">],</div><div class=\"line\"><span class=\"comment\">// optional callback</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// results is now equal to ['one', 'two']</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>方法3：Promise –虽然没有了嵌套，还是需要不少的回调<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">asyncFun1().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something with a in function 1</span></div><div class=\"line\">    asyncFun2();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something with b in function 2</span></div><div class=\"line\">    asyncFun3();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do somethin with c in function 3</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Promise对象有以下两个特点。<br>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n<blockquote>\n<p>问题还有没有更好的方法？</p>\n</blockquote>\n<h5 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h5><p>ES6新特性中带来了新一代解决回调地狱的神器：Generator，同时generator 也是 koa 的基础，想要用好 koa 离不开对 generator 的理解。那么什么是generator？<br>Generator是一种方便按照某种规则生成元素的迭代器，不过鉴于其特殊的语法和运行原理，可以通过某种方式写出同步化的异步代码，从而避免回调。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">genfn</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span> ; i++) &#123;</div><div class=\"line\">        a = a + r ;</div><div class=\"line\">        <span class=\"keyword\">yield</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sum = genfn(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">// returns &#123; value : 8, done : false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">// returns &#123; value : 11, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">// returns &#123; value : 14, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">//return &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>函数genfn 定义了一个执行3次的循环，每次执行，给a变量加3。<br>yield a 会暂停执行并保存当前堆栈，返回当前的a。<br> 与普通函数不同，generator只会定义遍历器，而不会执行，每次调用这个遍历器的next方法，就从函数体的头部或者上一次停下来的地方开始执行，直到遇到下一个yield语句为止。</p>\n<h5 id=\"co\"><a href=\"#co\" class=\"headerlink\" title=\"co\"></a>co</h5><p>co是什么？<br>co 函数库是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。</p>\n<p>前面说过，Generator 函数就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。使用 co 的前提条件是，Generator 函数的 yield 命令后面，只能是 Thunk 函数或 Promise 对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 利用Generator 函数，依次读取两个文件。</span></div><div class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    fs.readFile(file, <span class=\"string\">'utf8'</span>, fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//generator 函数只要传入 co 函数，就会自动执行</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">yield</span> read(<span class=\"string\">'.gitignore'</span>);<span class=\"comment\">//读取文件1</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.length);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"keyword\">yield</span> read(<span class=\"string\">'package.json'</span>);<span class=\"comment\">//读取文件2</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(b.length);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行完毕'</span>)<span class=\"comment\">//co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>co 要求所有的异步函数必须是偏函数，称之为 thunk :<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    fs.readFile(file, <span class=\"string\">'utf8'</span>, fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对实现原理感兴趣的可以阅读其源码：<a href=\"https://github.com/tj/co/blob/master/index.js\" target=\"_blank\" rel=\"external\">https://github.com/tj/co/blob/master/index.js</a></p>\n<p>co的嵌套使用：（并发的异步操作）<br>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。只要把并发的操作都放在数组或对象里面。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组的写法</span></div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"keyword\">yield</span> [</div><div class=\"line\">    <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>),</div><div class=\"line\">    <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>)</div><div class=\"line\">  ];</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(res); </div><div class=\"line\">&#125;).catch(onerror);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对象的写法</span></div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"keyword\">yield</span> &#123;</div><div class=\"line\">    <span class=\"number\">1</span>: <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>),</div><div class=\"line\">    <span class=\"number\">2</span>: <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>),</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(res); </div><div class=\"line\">&#125;).catch(onerror);</div></pre></td></tr></table></figure></p>\n<h5 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"error\"></a>error</h5><p>在 Node.js 中，错误处理的方法主要有下面几种：</p>\n<p>和其他同步语言类似的 throw / try / catch 方法<br>callback(err, data) 回调形式<br>通过 EventEmitter 触发一个 error 事件</p>\n<p>错误处理是应用健壮性非常重要的一部分，koa 在错误处理的便利上比 express 好非常多。koa 有 error 事件，当发生错误时，可以通过该事件，对错误进行统一的处理。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//express</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</div><div class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//koa</span></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> filename = <span class=\"string\">'/nonexists'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> statAsync = <span class=\"built_in\">Promise</span>.promisify(fs.stat);</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> statAsync(filename);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">  <span class=\"comment\">// error here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>koa 自定义中间件 统一的错误处理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span>* next;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> status = e.status || <span class=\"number\">500</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> message = e.message || <span class=\"string\">'服务器错误'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> JsonError) &#123; <span class=\"comment\">// 错误是 json 错误</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.body = &#123;</div><div class=\"line\">        <span class=\"string\">'status'</span>: status,</div><div class=\"line\">        <span class=\"string\">'message'</span>: message</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">if</span> (status == <span class=\"number\">500</span>) &#123; </div><div class=\"line\">        <span class=\"comment\">// 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.app.emit(<span class=\"string\">'error'</span>, e, <span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">this</span>.status = status;</div><div class=\"line\">    <span class=\"comment\">// 根据 status 渲染不同的页面</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"number\">403</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.render(<span class=\"string\">'403.html'</span>, &#123;<span class=\"string\">'err'</span>: e&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"number\">404</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.render(<span class=\"string\">'404.html'</span>, &#123;<span class=\"string\">'err'</span>: e&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"number\">500</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.render(<span class=\"string\">'500.html'</span>, &#123;<span class=\"string\">'err'</span>: e&#125;);</div><div class=\"line\">      <span class=\"comment\">// 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.app.emit(<span class=\"string\">'error'</span>, e, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>egg<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.ctx.curl(<span class=\"string\">'http://eggjs.com/api/echo'</span>, &#123; <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span> &#125;);</div><div class=\"line\">  <span class=\"keyword\">if</span> (res.status !== <span class=\"number\">200</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'response status is not 200'</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> res.data;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.logger.error(err);</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"node-process\"><a href=\"#node-process\" class=\"headerlink\" title=\"node process\"></a>node process</h5><p>nodejs代码是单线程的，一个 node 进程只能运行在一个 CPU 上。那么如果用 node 来做 web server，就无法享受到多核运算的好处。</p>\n<blockquote>\n<p>如何利用上多核 CPU 的并发优势？</p>\n</blockquote>\n<ul>\n<li>同时启动多个进程。</li>\n</ul>\n<p>nodejs 提供了child_process 模块来创建子进程，方法有 exec、spawn、fork三种。</p>\n<ol>\n<li>exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。</li>\n<li>spawn 使用指定的命令行参数创建新进程。</li>\n<li>fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [‘./son.js’]) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。</li>\n</ol>\n<p>实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker.js</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程 \"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\" 执行。\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//master.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> workerProcess = child_process.exec(<span class=\"string\">'node support.js '</span>+i,</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(error.stack);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'stdout: '</span> + stdout);</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'stderr: '</span> + stderr);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      workerProcess.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码 '</span>+code);</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> node master.js </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 1 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 0 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 2 执行。</div><div class=\"line\"></div><div class=\"line\">stderr:</div></pre></td></tr></table></figure></p>\n<ul>\n<li>EGG中的多进程模型<br>在服务器上同时启动多个进程。<br>每个进程里都跑的是同一份源代码（好比把以前一个进程的工作分给多个进程去做）。<br>这些进程可以同时监听一个端口<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">'cluster'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> numCPUs = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus().length;</div><div class=\"line\"><span class=\"keyword\">if</span> (cluster.isMaster) &#123;</div><div class=\"line\">  <span class=\"comment\">// Fork workers.</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numCPUs; i++) &#123;</div><div class=\"line\">    cluster.fork();</div><div class=\"line\">  &#125;</div><div class=\"line\">  cluster.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">worker, code, signal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker '</span> + worker.process.pid + <span class=\"string\">' died'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Workers can share any TCP connection</span></div><div class=\"line\">  <span class=\"comment\">// In this case it is an HTTP server</span></div><div class=\"line\">  http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">    res.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">  &#125;).listen(<span class=\"number\">8000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5-应用\"><a href=\"#5-应用\" class=\"headerlink\" title=\"5.应用\"></a>5.应用</h4><p> express + swig<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//nodejs server.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>)(),</div><div class=\"line\">    serveStatic = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-static'</span>),</div><div class=\"line\">    bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>),</div><div class=\"line\">    swig = <span class=\"built_in\">require</span>(<span class=\"string\">'swig'</span>),</div><div class=\"line\">    session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>),</div><div class=\"line\">    ueditor = <span class=\"built_in\">require</span>(<span class=\"string\">\"ueditor-nodejs\"</span>),</div><div class=\"line\">    path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> userRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/userRouter\"</span>),</div><div class=\"line\">    registerRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/registerRouter\"</span>),</div><div class=\"line\">    signinRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/signinRouter\"</span>),</div><div class=\"line\">    orderRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/orderRouter\"</span>),</div><div class=\"line\">    paperRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/PaperShare\"</span>),</div><div class=\"line\">    uploadRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/UploadRouter\"</span>),</div><div class=\"line\">    articleRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/articleRouter\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> allowCrossDomain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//console.log(\"get request!\");</span></div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'*'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET,PUT,POST,DELETE'</span>);</div><div class=\"line\">  <span class=\"comment\">//res.header('Access-Control-Allow-Credentials',true);</span></div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'Content-Type'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">swig.setDefaults(&#123;</div><div class=\"line\">  cache: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// var swig2 = new swig.Swig();</span></div><div class=\"line\">app.engine(<span class=\"string\">'html'</span>, swig.renderFile);</div><div class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'html'</span>);</div><div class=\"line\">app.set(<span class=\"string\">'views'</span>, <span class=\"string\">'./templates'</span>)</div><div class=\"line\"></div><div class=\"line\">app.use(log(<span class=\"string\">'dev'</span>));</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123;</div><div class=\"line\">  extended: <span class=\"literal\">true</span></div><div class=\"line\">&#125;));</div><div class=\"line\">app.use(bodyParser.json());</div><div class=\"line\"></div><div class=\"line\">app.use(allowCrossDomain);</div><div class=\"line\"><span class=\"comment\">// app.use('/admin',checkUser);</span></div><div class=\"line\">app.use(serveStatic(<span class=\"string\">'public'</span>));</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'filter session.user is '</span>,req.session.user);</div><div class=\"line\">  <span class=\"keyword\">if</span> (req.session.user)&#123;</div><div class=\"line\">    res.locals.currentUser = req.session.user;</div><div class=\"line\">  &#125;</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/user'</span>, userRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/regist'</span>,registerRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/signin'</span>,signinRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/order'</span>,orderRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/paper'</span>,paperRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/upload'</span>,uploadRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/article'</span>,articleRouter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Swig will cache templates for you, but you can disable</span></div><div class=\"line\"><span class=\"comment\">// that and use Express's caching instead, if you like:</span></div><div class=\"line\">app.set(<span class=\"string\">'view cache'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">//welcome index 首页</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//res.redirect(\"./admin\");</span></div><div class=\"line\">  res.render(<span class=\"string\">'index'</span>,&#123;<span class=\"attr\">user</span>:req.session.user&#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">18080</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  logger.log(<span class=\"string\">\"connect successful! Listen 18080!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p> koa + xtml </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//node app.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> debug = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'koa-example'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"comment\">//配置文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/config'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//config 注入中间件，方便调用配置信息</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.config)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = config;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//log记录</span></div><div class=\"line\"><span class=\"keyword\">var</span> Logger = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-logger'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> logger = Logger(&#123;</div><div class=\"line\">    dir: config.logDir,</div><div class=\"line\">    format: <span class=\"string\">'YYYY-MM-DD-[&#123;category&#125;][.log]'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//router use : this.logger.error(new Error(''))</span></div><div class=\"line\">app.context.logger = logger;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> onerror = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-onerror'</span>);</div><div class=\"line\">onerror(app);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//xtemplate对koa的适配</span></div><div class=\"line\"><span class=\"keyword\">var</span> xtplApp = <span class=\"built_in\">require</span>(<span class=\"string\">'xtpl/lib/koa'</span>);</div><div class=\"line\"><span class=\"comment\">//xtemplate模板渲染</span></div><div class=\"line\">xtplApp(app,&#123;</div><div class=\"line\">    <span class=\"comment\">//配置模板目录</span></div><div class=\"line\">    views: config.viewDir</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-session'</span>);</div><div class=\"line\">app.use(session(app));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//post body 解析</span></div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</div><div class=\"line\">app.use(bodyParser());</div><div class=\"line\"><span class=\"comment\">//数据校验</span></div><div class=\"line\"><span class=\"keyword\">var</span> validator = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-validator'</span>);</div><div class=\"line\">app.use(validator());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//静态文件cache</span></div><div class=\"line\"><span class=\"keyword\">var</span> staticCache = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static-cache'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> staticDir = config.staticDir;</div><div class=\"line\">app.use(staticCache(staticDir+<span class=\"string\">'/js'</span>));</div><div class=\"line\">app.use(staticCache(staticDir+<span class=\"string\">'/css'</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//路由</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</div><div class=\"line\">app.use(router(app));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//应用路由</span></div><div class=\"line\"><span class=\"keyword\">var</span> appRouter = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/index'</span>);</div><div class=\"line\">appRouter(app);</div><div class=\"line\">app.listen(config.port);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'listening on port %s'</span>,config.port);</div></pre></td></tr></table></figure>\n<h4 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6.总结\"></a>6.总结</h4><p>koa 与 express 是共享底层库的，本身先天优势在于 generator。koa和express在表现上的一点不同是采用ctx一个参数来调用中间件，而不是express的req, res。express的设计是串联的，设计思路很简洁。而koa的某一个中间件可以自行选择之后中间件的执行位置的。路由的设计上也不一样。express是通过router，而koa是通过中间价加载的方式来统一跳转路径。</p>\n<p>Egg自己做了一套进程管理机制，采用微核 + 插件体系，本身大部分功能由插件提供，高度灵活，功能强大。egg 的设计机制，旨在遵循同一套规范的同时，完美的达成生态共建和差异化定制的平衡点。</p>\n<p><img src=\"../images/111.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Nodejs-技术栈之Web框架的研究与应用\"><a href=\"#Nodejs-技术栈之Web框架的研究与应用\" class=\"headerlink\" title=\"Nodejs 技术栈之Web框架的研究与应用\"></a>Nodejs 技术栈之Web框架的研究与应用</h3><p>@(Nodejs)[express|koa|egg]</p>\n<hr>\n<p>[TOC]</p>\n<h4 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1.引言\"></a>1.引言</h4><p>Nodejs是一种基于事件驱动的服务端javascript。目前基于nodejs的web框架有很多，可以提供一系列强大的特性来帮助我们创建各种web应用及丰富的HTTP工具。现有的框架中，express、koa、egg应用比较广泛，而这三种框架之间又存在很大的差异。因此，本文将从框架自身的角度由表及里的来分析研究三者的优劣性及原理。最后结合实际代码，来进行进一步剖析。</p>\n<blockquote>\n<p>express：express 是 node 社区广泛使用的框架，简单且扩展性强，非常适合做个人项目。但框架本身缺少约定。</p>\n<p>koa：koa.js 是下一代的node.js框架，由Express团队开发，通过生成器（generators JavaScript 1.7新引入的，用于解决回调嵌套的方案），减少异步回调，提高代码的可读性和可维护性，同时改进了错误处理。<br>koa 的先天优势在于 generator，带来的主要好处如下：<br>更优雅、简单、安全的中间件机制，后面章节会详细说明<br>更优雅、简单的异常处理<br>更优雅、简单的异步编程方式</p>\n<p>egg：egg 为企业级框架和应用而生，可以帮助开发团队和开发人员降低开发和维护成本。egg继承于koa，而egg 选择了 koa 作为其基础框架，在它的模型基础上，进一步对它进行了一些增强。<br>特性：<br>      深度框架定制<br>      高度可扩展的插件机制<br>      内置多进程管理<br>      基于 koa 开发，性能优异<br>      框架稳定，测试覆盖率高<br>      渐进式开发</p>\n</blockquote>\n<h4 id=\"2-中间件\"><a href=\"#2-中间件\" class=\"headerlink\" title=\"2.中间件\"></a>2.中间件</h4><p>koa与express最大的不同之处在于中间件的加载方式不一样。koa是基于洋葱模型来加载的，而express是从上到下依次加载，首先装入的中间件函数也首先被执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">-------------------express----------------</div><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> myLogger = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'LOGGED'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;;</div><div class=\"line\">app.use(myLogger);</div><div class=\"line\"><span class=\"comment\">// 打印hello，world</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'主页请求'</span>)；</div><div class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// app.use(myLogger);  如果放在app.get()之后呢？</span></div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<p>在学习koa中间件之前，我们需要弄清什么，有哪些问题。</p>\n<ul>\n<li>koa 的中间件机制是如何实现？</li>\n<li>为什么中间件必须是 generator function？</li>\n<li>next 实参指向是什么？为什么可以通过 yield next 可以执行下一个中间件？</li>\n<li>为什么中间件从上到下执行完后，可以从下到上执行 yield next 后的逻辑？</li>\n</ul>\n<p>koa洋葱模型：<br><img src=\"../images/22.jpg\" alt=\"\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//请思考下面的打印结果是什么</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"string\">'1'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'5'</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.body);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'2'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'4'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body += <span class=\"string\">'3'</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<p>如果不用var app ＝ koa()这个封装好的框架中间件，怎么模拟出它执行的机制？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);<span class=\"comment\">//什么是co？后面将做解析</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NewKoa</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.middlewares = [];</div><div class=\"line\">&#125;</div><div class=\"line\">NewKoa.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">//注入个中间件</span></div><div class=\"line\">    use: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">generatorFn</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.middlewares.push(generatorFn);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">//执行中间件</span></div><div class=\"line\">    listen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//app.listen(3000)  实际就是调用这里</span></div><div class=\"line\">        <span class=\"keyword\">this</span>._run();</div><div class=\"line\">    &#125;,</div><div class=\"line\">    _run: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> middlewares = ctx.middlewares;</div><div class=\"line\">        <span class=\"keyword\">return</span> co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> prev = <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">var</span> i = middlewares.length;</div><div class=\"line\">            <span class=\"comment\">//从最后一个中间件到第一个中间件的顺序开始遍历</span></div><div class=\"line\">            <span class=\"keyword\">while</span> (i--) ｛</div><div class=\"line\">                <span class=\"comment\">//prev 将前面一个中间件传递给当前中间件</span></div><div class=\"line\">                prev = middlewares[i].call(ctx, prev);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//执行第一个中间件</span></div><div class=\"line\">            <span class=\"keyword\">yield</span> prev;</div><div class=\"line\">        &#125;)();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> NewKoa();</div><div class=\"line\">....</div></pre></td></tr></table></figure>\n<p> egg 是基于 koa 1 实现的，所以 egg 的中间件形式和 koa 的中间件形式是一样的，都是基于 generator function 的洋葱圈模型，因而在此不做说明。</p>\n<h4 id=\"3-路由\"><a href=\"#3-路由\" class=\"headerlink\" title=\"3.路由\"></a>3.路由</h4><p>在nodejs中，当我们建立了http请求后，需要建立路由来确定谁来响应客户端的请求。在HTTP请求中，我们可以通过路由来提取请求的url及get/post参数。<br>通常情况下，创建服务需要使用require来载入http模块，并将实例化的http赋值。</p>\n<h5 id=\"nodejs-服务实例\"><a href=\"#nodejs-服务实例\" class=\"headerlink\" title=\"nodejs 服务实例\"></a>nodejs 服务实例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  req.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">  res.end(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"express-的路由\"><a href=\"#express-的路由\" class=\"headerlink\" title=\"express 的路由\"></a>express 的路由</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">// 打印hello，world</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'主页请求'</span>)；</div><div class=\"line\">    res.send(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 打印about</span></div><div class=\"line\">app.get(<span class=\"string\">'/about'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'about'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'server is start on 3000...'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"koa路由\"><a href=\"#koa路由\" class=\"headerlink\" title=\"koa路由\"></a>koa路由</h5><p>所有的koa中间件，必须是 generator function ，即 function *(){} 语法。后面章节进行介绍。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//简单路由</span></div><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\"><span class=\"comment\">// koa 是通过 app.use注入来加载中间件的</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> path = <span class=\"keyword\">this</span>.path;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body = path; <span class=\"comment\">//打印当前请求路径</span></div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//可以注入多个中间件，koa 会从上到下加载，然后从下到上执行，关于中间件的执行顺序问题下一章进行分析</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">this</span>.demo = <span class=\"string\">'test text'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;<span class=\"comment\">//跳到下一个中间件</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.demo; <span class=\"comment\">// 打印test text</span></div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"comment\">// 引入路由中间件的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</div><div class=\"line\">app.use(router(app));</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//我是首页</span></div><div class=\"line\">    <span class=\"comment\">//this 指向请求</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//param()法，用于路由的参数处理,当访问 /detail/:id 路由时，会先执行定义的 generator逻辑。</span></div><div class=\"line\">app.param(<span class=\"string\">'id'</span>,<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">id,next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = <span class=\"built_in\">Number</span>(id);</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>.id != <span class=\"string\">'number'</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.status = <span class=\"number\">404</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">&#125;).get(<span class=\"string\">'/detail/:id'</span>, <span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//我是详情页面</span></div><div class=\"line\">    <span class=\"keyword\">var</span> id = <span class=\"keyword\">this</span>.id; <span class=\"comment\">//123</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.body = id;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h5 id=\"egg路由\"><a href=\"#egg路由\" class=\"headerlink\" title=\"egg路由\"></a>egg路由</h5><p>egg是基于koa框架开发的，其路由是通过描述请求的url及承担的执行动作controller来实现的，框架中约定了app/router.js文件用于统一所有的路由规则。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app/router.js</span></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"params\">app</span> =&gt;</span> &#123;</div><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>, <span class=\"string\">'user.info'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// app/controller/user.js</span></div><div class=\"line\">exports.info = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.body = &#123;</div><div class=\"line\">    name: <span class=\"string\">`hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.params.id&#125;</span>`</span>,</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-高级\"><a href=\"#4-高级\" class=\"headerlink\" title=\"4.高级\"></a>4.高级</h4><p>本章节主要是讲解node中一些比较重要的理论，回调地狱，es6 promise -&gt; generator -&gt; co 以及nodejs框架的异常错误处理方式。</p>\n<h5 id=\"callback-hell\"><a href=\"#callback-hell\" class=\"headerlink\" title=\"callback hell\"></a>callback hell</h5><blockquote>\n<p>Node.js 本身是单线程的，但通过其异步加载的特性可以实现任务以并行的方式进行。当业务逻辑复杂的时候，回调的嵌套过多，代码复杂度增加，可读性降低，维护起来也复杂，调试也复杂，就会造成回调地狱。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">asyncFun1(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err)&#123;</div><div class=\"line\">    callback(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">    asyncFun2(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err)&#123;</div><div class=\"line\">        callback(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">        asyncFun3(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, c</span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (err)&#123;</div><div class=\"line\">          callback(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>JS的回调让我们可以很轻易的写出异步执行的代码，而缺点也是由异步引起的，当太多的异步步骤需要一步一步执行，或者一个函数里有太多的异步操作，这时候就会产生大量嵌套的回调，使代码嵌套太深而难以阅读和维护。</p>\n<blockquote>\n<p>问题：那怎么改进？</p>\n</blockquote>\n<p>方法1：具名函数  –使用具名函数并保持代码层级不要太深<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun3</span>(<span class=\"params\">err, c</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在函数3中处理c</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\">err, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 在函数2中处理b</span></div><div class=\"line\">    asyncFun3(fun3);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\">err, a</span>) </span>&#123;   </div><div class=\"line\">  <span class=\"comment\">// 在函数1中处理a</span></div><div class=\"line\">    asyncFun2(fun2);</div><div class=\"line\">&#125;</div><div class=\"line\">asyncFun1(fun1);</div></pre></td></tr></table></figure></p>\n<p>方法2：Anync<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>.series([</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do some stuff ...</span></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'one'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do some more stuff ...</span></div><div class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">'two'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">],</div><div class=\"line\"><span class=\"comment\">// optional callback</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, results</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// results is now equal to ['one', 'two']</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>方法3：Promise –虽然没有了嵌套，还是需要不少的回调<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">asyncFun1().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something with a in function 1</span></div><div class=\"line\">    asyncFun2();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do something with b in function 2</span></div><div class=\"line\">    asyncFun3();</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// do somethin with c in function 3</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Promise对象有以下两个特点。<br>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</p>\n<blockquote>\n<p>问题还有没有更好的方法？</p>\n</blockquote>\n<h5 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h5><p>ES6新特性中带来了新一代解决回调地狱的神器：Generator，同时generator 也是 koa 的基础，想要用好 koa 离不开对 generator 的理解。那么什么是generator？<br>Generator是一种方便按照某种规则生成元素的迭代器，不过鉴于其特殊的语法和运行原理，可以通过某种方式写出同步化的异步代码，从而避免回调。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> r = <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">genfn</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span> ; i++) &#123;</div><div class=\"line\">        a = a + r ;</div><div class=\"line\">        <span class=\"keyword\">yield</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sum = genfn(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">// returns &#123; value : 8, done : false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">// returns &#123; value : 11, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">// returns &#123; value : 14, done: false &#125;</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum.next()); <span class=\"comment\">//return &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>函数genfn 定义了一个执行3次的循环，每次执行，给a变量加3。<br>yield a 会暂停执行并保存当前堆栈，返回当前的a。<br> 与普通函数不同，generator只会定义遍历器，而不会执行，每次调用这个遍历器的next方法，就从函数体的头部或者上一次停下来的地方开始执行，直到遇到下一个yield语句为止。</p>\n<h5 id=\"co\"><a href=\"#co\" class=\"headerlink\" title=\"co\"></a>co</h5><p>co是什么？<br>co 函数库是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。</p>\n<p>前面说过，Generator 函数就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。使用 co 的前提条件是，Generator 函数的 yield 命令后面，只能是 Thunk 函数或 Promise 对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 利用Generator 函数，依次读取两个文件。</span></div><div class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    fs.readFile(file, <span class=\"string\">'utf8'</span>, fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//generator 函数只要传入 co 函数，就会自动执行</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"keyword\">yield</span> read(<span class=\"string\">'.gitignore'</span>);<span class=\"comment\">//读取文件1</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a.length);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"keyword\">yield</span> read(<span class=\"string\">'package.json'</span>);<span class=\"comment\">//读取文件2</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(b.length);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'执行完毕'</span>)<span class=\"comment\">//co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>co 要求所有的异步函数必须是偏函数，称之为 thunk :<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">read</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    fs.readFile(file, <span class=\"string\">'utf8'</span>, fn);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对实现原理感兴趣的可以阅读其源码：<a href=\"https://github.com/tj/co/blob/master/index.js\" target=\"_blank\" rel=\"external\">https://github.com/tj/co/blob/master/index.js</a></p>\n<p>co的嵌套使用：（并发的异步操作）<br>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。只要把并发的操作都放在数组或对象里面。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组的写法</span></div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"keyword\">yield</span> [</div><div class=\"line\">    <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>),</div><div class=\"line\">    <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>)</div><div class=\"line\">  ];</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(res); </div><div class=\"line\">&#125;).catch(onerror);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 对象的写法</span></div><div class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> res = <span class=\"keyword\">yield</span> &#123;</div><div class=\"line\">    <span class=\"number\">1</span>: <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">1</span>),</div><div class=\"line\">    <span class=\"number\">2</span>: <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">2</span>),</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(res); </div><div class=\"line\">&#125;).catch(onerror);</div></pre></td></tr></table></figure></p>\n<h5 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"error\"></a>error</h5><p>在 Node.js 中，错误处理的方法主要有下面几种：</p>\n<p>和其他同步语言类似的 throw / try / catch 方法<br>callback(err, data) 回调形式<br>通过 EventEmitter 触发一个 error 事件</p>\n<p>错误处理是应用健壮性非常重要的一部分，koa 在错误处理的便利上比 express 好非常多。koa 有 error 事件，当发生错误时，可以通过该事件，对错误进行统一的处理。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//express</span></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(err.stack);</div><div class=\"line\">  res.status(<span class=\"number\">500</span>).send(<span class=\"string\">'Something broke!'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//koa</span></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> filename = <span class=\"string\">'/nonexists'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> statAsync = <span class=\"built_in\">Promise</span>.promisify(fs.stat);</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> statAsync(filename);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">  <span class=\"comment\">// error here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>koa 自定义中间件 统一的错误处理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\">next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span>* next;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> status = e.status || <span class=\"number\">500</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> message = e.message || <span class=\"string\">'服务器错误'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> JsonError) &#123; <span class=\"comment\">// 错误是 json 错误</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.body = &#123;</div><div class=\"line\">        <span class=\"string\">'status'</span>: status,</div><div class=\"line\">        <span class=\"string\">'message'</span>: message</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">if</span> (status == <span class=\"number\">500</span>) &#123; </div><div class=\"line\">        <span class=\"comment\">// 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.app.emit(<span class=\"string\">'error'</span>, e, <span class=\"keyword\">this</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">this</span>.status = status;</div><div class=\"line\">    <span class=\"comment\">// 根据 status 渲染不同的页面</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"number\">403</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.render(<span class=\"string\">'403.html'</span>, &#123;<span class=\"string\">'err'</span>: e&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"number\">404</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.render(<span class=\"string\">'404.html'</span>, &#123;<span class=\"string\">'err'</span>: e&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status == <span class=\"number\">500</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.body = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.render(<span class=\"string\">'500.html'</span>, &#123;<span class=\"string\">'err'</span>: e&#125;);</div><div class=\"line\">      <span class=\"comment\">// 触发 koa 统一错误事件，可以打印出详细的错误堆栈 log</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.app.emit(<span class=\"string\">'error'</span>, e, <span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>egg<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> res = <span class=\"keyword\">yield</span> <span class=\"keyword\">this</span>.ctx.curl(<span class=\"string\">'http://eggjs.com/api/echo'</span>, &#123; <span class=\"attr\">dataType</span>: <span class=\"string\">'json'</span> &#125;);</div><div class=\"line\">  <span class=\"keyword\">if</span> (res.status !== <span class=\"number\">200</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'response status is not 200'</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> res.data;</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.logger.error(err);</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"node-process\"><a href=\"#node-process\" class=\"headerlink\" title=\"node process\"></a>node process</h5><p>nodejs代码是单线程的，一个 node 进程只能运行在一个 CPU 上。那么如果用 node 来做 web server，就无法享受到多核运算的好处。</p>\n<blockquote>\n<p>如何利用上多核 CPU 的并发优势？</p>\n</blockquote>\n<ul>\n<li>同时启动多个进程。</li>\n</ul>\n<p>nodejs 提供了child_process 模块来创建子进程，方法有 exec、spawn、fork三种。</p>\n<ol>\n<li>exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。</li>\n<li>spawn 使用指定的命令行参数创建新进程。</li>\n<li>fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork(‘./son.js’) 相当于 spawn(‘node’, [‘./son.js’]) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。</li>\n</ol>\n<p>实例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//worker.js</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"进程 \"</span> + process.argv[<span class=\"number\">2</span>] + <span class=\"string\">\" 执行。\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//master.js</span></div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> child_process = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> workerProcess = child_process.exec(<span class=\"string\">'node support.js '</span>+i,</div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, stdout, stderr</span>) </span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (error) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(error.stack);</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'stdout: '</span> + stdout);</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">'stderr: '</span> + stderr);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      workerProcess.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已退出，退出码 '</span>+code);</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> node master.js </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 1 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 0 执行。</div><div class=\"line\"></div><div class=\"line\">stderr: </div><div class=\"line\">子进程已退出，退出码 0</div><div class=\"line\">stdout: 进程 2 执行。</div><div class=\"line\"></div><div class=\"line\">stderr:</div></pre></td></tr></table></figure></p>\n<ul>\n<li>EGG中的多进程模型<br>在服务器上同时启动多个进程。<br>每个进程里都跑的是同一份源代码（好比把以前一个进程的工作分给多个进程去做）。<br>这些进程可以同时监听一个端口<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">'cluster'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> numCPUs = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus().length;</div><div class=\"line\"><span class=\"keyword\">if</span> (cluster.isMaster) &#123;</div><div class=\"line\">  <span class=\"comment\">// Fork workers.</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numCPUs; i++) &#123;</div><div class=\"line\">    cluster.fork();</div><div class=\"line\">  &#125;</div><div class=\"line\">  cluster.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">worker, code, signal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker '</span> + worker.process.pid + <span class=\"string\">' died'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Workers can share any TCP connection</span></div><div class=\"line\">  <span class=\"comment\">// In this case it is an HTTP server</span></div><div class=\"line\">  http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">    res.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">  &#125;).listen(<span class=\"number\">8000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5-应用\"><a href=\"#5-应用\" class=\"headerlink\" title=\"5.应用\"></a>5.应用</h4><p> express + swig<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//nodejs server.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">\"express\"</span>)(),</div><div class=\"line\">    serveStatic = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-static'</span>),</div><div class=\"line\">    bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>),</div><div class=\"line\">    swig = <span class=\"built_in\">require</span>(<span class=\"string\">'swig'</span>),</div><div class=\"line\">    session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>),</div><div class=\"line\">    ueditor = <span class=\"built_in\">require</span>(<span class=\"string\">\"ueditor-nodejs\"</span>),</div><div class=\"line\">    path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> userRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/userRouter\"</span>),</div><div class=\"line\">    registerRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/registerRouter\"</span>),</div><div class=\"line\">    signinRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/signinRouter\"</span>),</div><div class=\"line\">    orderRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/orderRouter\"</span>),</div><div class=\"line\">    paperRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/PaperShare\"</span>),</div><div class=\"line\">    uploadRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/UploadRouter\"</span>),</div><div class=\"line\">    articleRouter = <span class=\"built_in\">require</span>(<span class=\"string\">\"./backend/router/articleRouter\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> allowCrossDomain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//console.log(\"get request!\");</span></div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Origin'</span>, <span class=\"string\">'*'</span>);</div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Methods'</span>, <span class=\"string\">'GET,PUT,POST,DELETE'</span>);</div><div class=\"line\">  <span class=\"comment\">//res.header('Access-Control-Allow-Credentials',true);</span></div><div class=\"line\">  res.header(<span class=\"string\">'Access-Control-Allow-Headers'</span>, <span class=\"string\">'Content-Type'</span>);</div><div class=\"line\">  next();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">swig.setDefaults(&#123;</div><div class=\"line\">  cache: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// var swig2 = new swig.Swig();</span></div><div class=\"line\">app.engine(<span class=\"string\">'html'</span>, swig.renderFile);</div><div class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'html'</span>);</div><div class=\"line\">app.set(<span class=\"string\">'views'</span>, <span class=\"string\">'./templates'</span>)</div><div class=\"line\"></div><div class=\"line\">app.use(log(<span class=\"string\">'dev'</span>));</div><div class=\"line\">app.use(bodyParser.urlencoded(&#123;</div><div class=\"line\">  extended: <span class=\"literal\">true</span></div><div class=\"line\">&#125;));</div><div class=\"line\">app.use(bodyParser.json());</div><div class=\"line\"></div><div class=\"line\">app.use(allowCrossDomain);</div><div class=\"line\"><span class=\"comment\">// app.use('/admin',checkUser);</span></div><div class=\"line\">app.use(serveStatic(<span class=\"string\">'public'</span>));</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'filter session.user is '</span>,req.session.user);</div><div class=\"line\">  <span class=\"keyword\">if</span> (req.session.user)&#123;</div><div class=\"line\">    res.locals.currentUser = req.session.user;</div><div class=\"line\">  &#125;</div><div class=\"line\">  next();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/user'</span>, userRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/regist'</span>,registerRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/signin'</span>,signinRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/order'</span>,orderRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/paper'</span>,paperRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/upload'</span>,uploadRouter);</div><div class=\"line\">app.use(<span class=\"string\">'/article'</span>,articleRouter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Swig will cache templates for you, but you can disable</span></div><div class=\"line\"><span class=\"comment\">// that and use Express's caching instead, if you like:</span></div><div class=\"line\">app.set(<span class=\"string\">'view cache'</span>, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">//welcome index 首页</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//res.redirect(\"./admin\");</span></div><div class=\"line\">  res.render(<span class=\"string\">'index'</span>,&#123;<span class=\"attr\">user</span>:req.session.user&#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">18080</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  logger.log(<span class=\"string\">\"connect successful! Listen 18080!\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p> koa + xtml </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//node app.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> debug = <span class=\"built_in\">require</span>(<span class=\"string\">'debug'</span>)(<span class=\"string\">'koa-example'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</div><div class=\"line\"><span class=\"comment\">//配置文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config/config'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = koa();</div><div class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> *(<span class=\"params\">next</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//config 注入中间件，方便调用配置信息</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.config)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.config = config;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">yield</span> next;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//log记录</span></div><div class=\"line\"><span class=\"keyword\">var</span> Logger = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-logger'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> logger = Logger(&#123;</div><div class=\"line\">    dir: config.logDir,</div><div class=\"line\">    format: <span class=\"string\">'YYYY-MM-DD-[&#123;category&#125;][.log]'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//router use : this.logger.error(new Error(''))</span></div><div class=\"line\">app.context.logger = logger;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> onerror = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-onerror'</span>);</div><div class=\"line\">onerror(app);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//xtemplate对koa的适配</span></div><div class=\"line\"><span class=\"keyword\">var</span> xtplApp = <span class=\"built_in\">require</span>(<span class=\"string\">'xtpl/lib/koa'</span>);</div><div class=\"line\"><span class=\"comment\">//xtemplate模板渲染</span></div><div class=\"line\">xtplApp(app,&#123;</div><div class=\"line\">    <span class=\"comment\">//配置模板目录</span></div><div class=\"line\">    views: config.viewDir</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-session'</span>);</div><div class=\"line\">app.use(session(app));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//post body 解析</span></div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-bodyparser'</span>);</div><div class=\"line\">app.use(bodyParser());</div><div class=\"line\"><span class=\"comment\">//数据校验</span></div><div class=\"line\"><span class=\"keyword\">var</span> validator = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-validator'</span>);</div><div class=\"line\">app.use(validator());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//静态文件cache</span></div><div class=\"line\"><span class=\"keyword\">var</span> staticCache = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static-cache'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> staticDir = config.staticDir;</div><div class=\"line\">app.use(staticCache(staticDir+<span class=\"string\">'/js'</span>));</div><div class=\"line\">app.use(staticCache(staticDir+<span class=\"string\">'/css'</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//路由</span></div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</div><div class=\"line\">app.use(router(app));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//应用路由</span></div><div class=\"line\"><span class=\"keyword\">var</span> appRouter = <span class=\"built_in\">require</span>(<span class=\"string\">'./router/index'</span>);</div><div class=\"line\">appRouter(app);</div><div class=\"line\">app.listen(config.port);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'listening on port %s'</span>,config.port);</div></pre></td></tr></table></figure>\n<h4 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6.总结\"></a>6.总结</h4><p>koa 与 express 是共享底层库的，本身先天优势在于 generator。koa和express在表现上的一点不同是采用ctx一个参数来调用中间件，而不是express的req, res。express的设计是串联的，设计思路很简洁。而koa的某一个中间件可以自行选择之后中间件的执行位置的。路由的设计上也不一样。express是通过router，而koa是通过中间价加载的方式来统一跳转路径。</p>\n<p>Egg自己做了一套进程管理机制，采用微核 + 插件体系，本身大部分功能由插件提供，高度灵活，功能强大。egg 的设计机制，旨在遵循同一套规范的同时，完美的达成生态共建和差异化定制的平衡点。</p>\n<p><img src=\"../images/111.jpg\" alt=\"\"></p>\n"},{"title":"autopilot下的NodeJs微服务","date":"2017-08-02T02:41:47.000Z","_content":"\n### 引言\n\n> 本文主要从autopilot入手，解释了什么是容器化的NodeJs微服务、NodeJs微服务所利用的技术栈，\n并对这些技术进行了解释和说明。\n\n通过梳理jsconf中Wyatt Preul 分享的NodeJS Microservices on Autopilot的PPT，理清了什么是容器化的微服务。\n当前的各类应用的服务中，后端的服务及业务逻辑之间是相互依赖的，而且服务也非常复杂，子服务之间相互的耦合比较高，那么在实际的应用中\n可能会出现这样的场景，前端发起请求，然后请求超时，这时系统会爆出500出来，这时应用会一步步反馈当前的情况给后端运维人员，而这个过程是漫长的。。\n\n遇到上述的场景，我们想，过载的服务是否可以返回503状态码，同时负载均衡应该可以降低服务的分发任务，如何才能让请求超时的应用知道其他可用的服务并且在下一次请求可以成功。\n\n### 什么是Autopilot Pattern\n\nautopilot的理念是将一个个的服务包装在containerPilot中，而每一个containerPilot都有一个docker Container容器。\n各个服务通过nginx等负载均衡来管理，最终通过`consul`来实现多数据分布式共享。\n\n在应用还没有开发完毕时，我们想可以很简单的对其进行构建、测试、部署以及下线。在开发中，我们希望应用可以被一键部署和下线，\n应用和工作流程能被自动化测试、应用和工作流能直接执行在我们的pc上如在云上一样、应用之间的关系应该是解耦的。\n\n利用Autopilot可以很容易实现部署和下线。通过Autopilot可以自动化执行不必要的东西，只保留必要的操作；\n通过自动执行这些操作任务，使得应用程序保持在同一个版本中，提高了可见性。但最重要的是，这些应用程序是可以跨平台的。\n\nAutopilot Pattern 的特性：\n\n* 可以离线的开发；\n* 开发到部署完全自动化、可重复的工作流程自动化；\n* 运行在单个容器中的应用程序，相互解耦\n* 可以根据业务量需求，弹性的增加微服务的数量\n* 动态更新反向代理配置等\n\nAutopilot ContainerPilot：\n\nContainerPilot会定时进行health check 来监控容器中服务的运行情况，一旦onChange就告知consul。生命周期如下图所示：\n![](../images/13.png)\n\n参考文档：[Autopilot Pattern Applications](http://autopilotpattern.io/)\n\n### NodeJs微服务技术栈\n\n在Wyatt Preul分享的ppt示例中，有这样一副图，如下。图中用到了很多新的技术栈。包括下面几个方面：\n\n* [Docker](https://www.docker.com/) \n* [Consul](https://www.consul.io/)\n* [Træfɪk](https://docs.traefik.io/)\n* [NATS](https://github.com/devfacet/natsboard)\n* [Prometheus](https://prometheus.io)\n* [InfluxDB](https://github.com/influxdata/influxdb)\n![](../images/1.png)\n\n图中带有Node标识的都是一个个的应用服务，其余的是示例中所用到一些网络及数据服务。并且这些服务都包在一个个的docker的容器中。\n下面我们将介绍上述相关的技术。可能偏向devOps了，所以没有深入了解，只当普及一下知识面。\n\n##### Docker\n\n1.什么是Docker？\n\n> Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\nDocker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。如下图。\n传统虚拟化和Docker的不同之处在于传统的虚拟化技术，会运行一套完整的操作系统。\n\n![](../images/12.png)\n![](../images/11.png)\n\n本文的示例源码中，用到了很多docker的知识，设计镜像定制、容器操作、health check、端口暴露等,这里不作展开，感兴趣的自行查看文档。\n\n参考文档：[docker](https://yeasy.gitbooks.io/docker_practice/introduction/)\n\n##### Consul\n\n1.什么是Consul？\n\n> Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.\n\n2.Consul的使用场景\n\n* docker 实例的注册与配置共享\n* coreos 实例的注册与配置共享\n* vitess 集群\n* SaaS 应用的配置共享\n* 与 confd 服务集成，动态生成 nginx 和 haproxy 配置文件\n\n3.Consul 的优势\n\n* 使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft.\n* 支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等. zookeeper 和 etcd 均不提供多数据中心功能的支持.\n* 支持健康检查. etcd 不提供此功能.\n* 支持 http 和 dns 协议接口. zookeeper 的集成较为复杂, etcd 只支持 http 协议.\n* 官方提供web管理界面, etcd 无此功能.\n\n4.Consul 的角色\n\n>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群.\n server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其他数据中心通讯. 每个数据中心的 server 数量推荐为 3 个或是 5 个.\n\n##### Træfɪk\n\n>Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。\n主要作用是在多个Docker container 中实现负载均衡的，支持反向代理动态配置热更新如下图。\n\n![](../images/10.png)\n\n参考中文文档：[Træfɪk](https://docs.traefik.cn/)\n参考英文文档：[Træfɪk](https://docs.traefik.io/)\n\n##### NATS\n\n主要是提供一套即时的NAT server监控dashboard。详见[github](https://github.com/devfacet/natsboard)\n\n##### Prometheus\n\n1.什么是 Prometheus？\n\n>Prometheus是一套开源的监控&报警&时间序列数据库的组合，起始是由SoundCloud公司开发的。\ngoogle SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。\n\n2.Prometheus 的优点\n\n* 非常少的外部依赖，安装使用超简单\n* 已经有非常多的系统集成 例如：docker HAProxy Nginx JMX等等\n* 服务自动化发现\n* 直接集成到代码\n* 设计思想是按照分布式、微服务架构来实现的\n\n3.Prometheus 特性\n\n* 自定义多维度的数据模型\n* 非常高效的存储 平均一个采样数据占 ~3.5 bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。\n* 强大的查询语句\n* 轻松实现数据可视化\n\n4.系统架构\n\n![](../images/9.png)\n\n服务过程: Prometheus daemon 负责定时去目标上pull metrics(指标) 数据，每个pull目标需要暴露一个http服务的接口给它定时抓取。\nPrometheus支持通过配置文件、Consul、DNS、kubernetes等方式指定抓取目标。\nAlertmanager 是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。\nPrometheus支持很多方式的图表可视化，例如Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。\nPushGateway这个组件是支持Client主动推送 metrics 到PushGateway，而Prometheus只是定时去Gateway上抓取数据。\n\n参考文档：[Prometheus](https://prometheus.io/docs/introduction/overview/)\n\n\n##### InfluxDB\n\n>Influxdb是一个开源的分布式时序、时间和指标数据库，使用go语言编写，无需外部依赖。自带管理工具，支持sql查询，非常适合存储指标、事件、分析等数据。\n\n三大特性：\n* 时序性（Time Series）:与时间相关的函数的灵活使用（诸如最大、最小、求和等);\n* 度量（Metrics）:对实时大量数据进行计算;\n* 事件（Event）:支持任意的事件数据，换句话说，任意事件的数据我们都可以做操作;\n\n有兴趣的可以看文档：[InfluxDB](https://docs.influxdata.com/influxdb/v1.3/)\n\n\n### 示例代码实践\n\n首先安装[docker for mac](https://docs.docker.com/docker-for-mac/install/) ,否则无法运行示例。（示例的使用说明有误，localhost:10001没有对外发布，对内的，localhost就好）\n\n示例代码：[nodeJS-MicroServices-example](https://github.com/autopilotpattern/nodejs-example)\n\n相关展示界面如下：\n\nlocalhost:8080  =>  Traefik\n![](../images/3.png)\n\nlocalhost:3000 => Nats\n![](../images/2.png)\n\nlocalhost:8083  =>InfluxDB\n![](../images/4.png)\n\nlocalhost:8500 => Consul\n![](../images/5.png)\n\nlocalhost:9090 => Prometheus\n![](../images/6.png)\n\nlocalhost => 示例中NodeJS本身的应用服务\n![](../images/7.png)\n\n在docker中通过kitematic 可以管理、监控各个服务的运行情况.\n\n![](../images/8.png)\n","source":"_posts/autopilot下的NodeJs微服务.md","raw":"---\ntitle: autopilot下的NodeJs微服务\ndate: 2017-08-02 10:41:47\ntags: NodeJs\n---\n\n### 引言\n\n> 本文主要从autopilot入手，解释了什么是容器化的NodeJs微服务、NodeJs微服务所利用的技术栈，\n并对这些技术进行了解释和说明。\n\n通过梳理jsconf中Wyatt Preul 分享的NodeJS Microservices on Autopilot的PPT，理清了什么是容器化的微服务。\n当前的各类应用的服务中，后端的服务及业务逻辑之间是相互依赖的，而且服务也非常复杂，子服务之间相互的耦合比较高，那么在实际的应用中\n可能会出现这样的场景，前端发起请求，然后请求超时，这时系统会爆出500出来，这时应用会一步步反馈当前的情况给后端运维人员，而这个过程是漫长的。。\n\n遇到上述的场景，我们想，过载的服务是否可以返回503状态码，同时负载均衡应该可以降低服务的分发任务，如何才能让请求超时的应用知道其他可用的服务并且在下一次请求可以成功。\n\n### 什么是Autopilot Pattern\n\nautopilot的理念是将一个个的服务包装在containerPilot中，而每一个containerPilot都有一个docker Container容器。\n各个服务通过nginx等负载均衡来管理，最终通过`consul`来实现多数据分布式共享。\n\n在应用还没有开发完毕时，我们想可以很简单的对其进行构建、测试、部署以及下线。在开发中，我们希望应用可以被一键部署和下线，\n应用和工作流程能被自动化测试、应用和工作流能直接执行在我们的pc上如在云上一样、应用之间的关系应该是解耦的。\n\n利用Autopilot可以很容易实现部署和下线。通过Autopilot可以自动化执行不必要的东西，只保留必要的操作；\n通过自动执行这些操作任务，使得应用程序保持在同一个版本中，提高了可见性。但最重要的是，这些应用程序是可以跨平台的。\n\nAutopilot Pattern 的特性：\n\n* 可以离线的开发；\n* 开发到部署完全自动化、可重复的工作流程自动化；\n* 运行在单个容器中的应用程序，相互解耦\n* 可以根据业务量需求，弹性的增加微服务的数量\n* 动态更新反向代理配置等\n\nAutopilot ContainerPilot：\n\nContainerPilot会定时进行health check 来监控容器中服务的运行情况，一旦onChange就告知consul。生命周期如下图所示：\n![](../images/13.png)\n\n参考文档：[Autopilot Pattern Applications](http://autopilotpattern.io/)\n\n### NodeJs微服务技术栈\n\n在Wyatt Preul分享的ppt示例中，有这样一副图，如下。图中用到了很多新的技术栈。包括下面几个方面：\n\n* [Docker](https://www.docker.com/) \n* [Consul](https://www.consul.io/)\n* [Træfɪk](https://docs.traefik.io/)\n* [NATS](https://github.com/devfacet/natsboard)\n* [Prometheus](https://prometheus.io)\n* [InfluxDB](https://github.com/influxdata/influxdb)\n![](../images/1.png)\n\n图中带有Node标识的都是一个个的应用服务，其余的是示例中所用到一些网络及数据服务。并且这些服务都包在一个个的docker的容器中。\n下面我们将介绍上述相关的技术。可能偏向devOps了，所以没有深入了解，只当普及一下知识面。\n\n##### Docker\n\n1.什么是Docker？\n\n> Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。\nDocker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。如下图。\n传统虚拟化和Docker的不同之处在于传统的虚拟化技术，会运行一套完整的操作系统。\n\n![](../images/12.png)\n![](../images/11.png)\n\n本文的示例源码中，用到了很多docker的知识，设计镜像定制、容器操作、health check、端口暴露等,这里不作展开，感兴趣的自行查看文档。\n\n参考文档：[docker](https://yeasy.gitbooks.io/docker_practice/introduction/)\n\n##### Consul\n\n1.什么是Consul？\n\n> Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.\n\n2.Consul的使用场景\n\n* docker 实例的注册与配置共享\n* coreos 实例的注册与配置共享\n* vitess 集群\n* SaaS 应用的配置共享\n* 与 confd 服务集成，动态生成 nginx 和 haproxy 配置文件\n\n3.Consul 的优势\n\n* 使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft.\n* 支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等. zookeeper 和 etcd 均不提供多数据中心功能的支持.\n* 支持健康检查. etcd 不提供此功能.\n* 支持 http 和 dns 协议接口. zookeeper 的集成较为复杂, etcd 只支持 http 协议.\n* 官方提供web管理界面, etcd 无此功能.\n\n4.Consul 的角色\n\n>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群.\n server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其他数据中心通讯. 每个数据中心的 server 数量推荐为 3 个或是 5 个.\n\n##### Træfɪk\n\n>Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。\n主要作用是在多个Docker container 中实现负载均衡的，支持反向代理动态配置热更新如下图。\n\n![](../images/10.png)\n\n参考中文文档：[Træfɪk](https://docs.traefik.cn/)\n参考英文文档：[Træfɪk](https://docs.traefik.io/)\n\n##### NATS\n\n主要是提供一套即时的NAT server监控dashboard。详见[github](https://github.com/devfacet/natsboard)\n\n##### Prometheus\n\n1.什么是 Prometheus？\n\n>Prometheus是一套开源的监控&报警&时间序列数据库的组合，起始是由SoundCloud公司开发的。\ngoogle SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。\n\n2.Prometheus 的优点\n\n* 非常少的外部依赖，安装使用超简单\n* 已经有非常多的系统集成 例如：docker HAProxy Nginx JMX等等\n* 服务自动化发现\n* 直接集成到代码\n* 设计思想是按照分布式、微服务架构来实现的\n\n3.Prometheus 特性\n\n* 自定义多维度的数据模型\n* 非常高效的存储 平均一个采样数据占 ~3.5 bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。\n* 强大的查询语句\n* 轻松实现数据可视化\n\n4.系统架构\n\n![](../images/9.png)\n\n服务过程: Prometheus daemon 负责定时去目标上pull metrics(指标) 数据，每个pull目标需要暴露一个http服务的接口给它定时抓取。\nPrometheus支持通过配置文件、Consul、DNS、kubernetes等方式指定抓取目标。\nAlertmanager 是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。\nPrometheus支持很多方式的图表可视化，例如Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。\nPushGateway这个组件是支持Client主动推送 metrics 到PushGateway，而Prometheus只是定时去Gateway上抓取数据。\n\n参考文档：[Prometheus](https://prometheus.io/docs/introduction/overview/)\n\n\n##### InfluxDB\n\n>Influxdb是一个开源的分布式时序、时间和指标数据库，使用go语言编写，无需外部依赖。自带管理工具，支持sql查询，非常适合存储指标、事件、分析等数据。\n\n三大特性：\n* 时序性（Time Series）:与时间相关的函数的灵活使用（诸如最大、最小、求和等);\n* 度量（Metrics）:对实时大量数据进行计算;\n* 事件（Event）:支持任意的事件数据，换句话说，任意事件的数据我们都可以做操作;\n\n有兴趣的可以看文档：[InfluxDB](https://docs.influxdata.com/influxdb/v1.3/)\n\n\n### 示例代码实践\n\n首先安装[docker for mac](https://docs.docker.com/docker-for-mac/install/) ,否则无法运行示例。（示例的使用说明有误，localhost:10001没有对外发布，对内的，localhost就好）\n\n示例代码：[nodeJS-MicroServices-example](https://github.com/autopilotpattern/nodejs-example)\n\n相关展示界面如下：\n\nlocalhost:8080  =>  Traefik\n![](../images/3.png)\n\nlocalhost:3000 => Nats\n![](../images/2.png)\n\nlocalhost:8083  =>InfluxDB\n![](../images/4.png)\n\nlocalhost:8500 => Consul\n![](../images/5.png)\n\nlocalhost:9090 => Prometheus\n![](../images/6.png)\n\nlocalhost => 示例中NodeJS本身的应用服务\n![](../images/7.png)\n\n在docker中通过kitematic 可以管理、监控各个服务的运行情况.\n\n![](../images/8.png)\n","slug":"autopilot下的NodeJs微服务","published":1,"updated":"2017-08-02T03:58:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uk41yk00028512rgmlugeu","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><blockquote>\n<p>本文主要从autopilot入手，解释了什么是容器化的NodeJs微服务、NodeJs微服务所利用的技术栈，<br>并对这些技术进行了解释和说明。</p>\n</blockquote>\n<p>通过梳理jsconf中Wyatt Preul 分享的NodeJS Microservices on Autopilot的PPT，理清了什么是容器化的微服务。<br>当前的各类应用的服务中，后端的服务及业务逻辑之间是相互依赖的，而且服务也非常复杂，子服务之间相互的耦合比较高，那么在实际的应用中<br>可能会出现这样的场景，前端发起请求，然后请求超时，这时系统会爆出500出来，这时应用会一步步反馈当前的情况给后端运维人员，而这个过程是漫长的。。</p>\n<p>遇到上述的场景，我们想，过载的服务是否可以返回503状态码，同时负载均衡应该可以降低服务的分发任务，如何才能让请求超时的应用知道其他可用的服务并且在下一次请求可以成功。</p>\n<h3 id=\"什么是Autopilot-Pattern\"><a href=\"#什么是Autopilot-Pattern\" class=\"headerlink\" title=\"什么是Autopilot Pattern\"></a>什么是Autopilot Pattern</h3><p>autopilot的理念是将一个个的服务包装在containerPilot中，而每一个containerPilot都有一个docker Container容器。<br>各个服务通过nginx等负载均衡来管理，最终通过<code>consul</code>来实现多数据分布式共享。</p>\n<p>在应用还没有开发完毕时，我们想可以很简单的对其进行构建、测试、部署以及下线。在开发中，我们希望应用可以被一键部署和下线，<br>应用和工作流程能被自动化测试、应用和工作流能直接执行在我们的pc上如在云上一样、应用之间的关系应该是解耦的。</p>\n<p>利用Autopilot可以很容易实现部署和下线。通过Autopilot可以自动化执行不必要的东西，只保留必要的操作；<br>通过自动执行这些操作任务，使得应用程序保持在同一个版本中，提高了可见性。但最重要的是，这些应用程序是可以跨平台的。</p>\n<p>Autopilot Pattern 的特性：</p>\n<ul>\n<li>可以离线的开发；</li>\n<li>开发到部署完全自动化、可重复的工作流程自动化；</li>\n<li>运行在单个容器中的应用程序，相互解耦</li>\n<li>可以根据业务量需求，弹性的增加微服务的数量</li>\n<li>动态更新反向代理配置等</li>\n</ul>\n<p>Autopilot ContainerPilot：</p>\n<p>ContainerPilot会定时进行health check 来监控容器中服务的运行情况，一旦onChange就告知consul。生命周期如下图所示：<br><img src=\"../images/13.png\" alt=\"\"></p>\n<p>参考文档：<a href=\"http://autopilotpattern.io/\" target=\"_blank\" rel=\"external\">Autopilot Pattern Applications</a></p>\n<h3 id=\"NodeJs微服务技术栈\"><a href=\"#NodeJs微服务技术栈\" class=\"headerlink\" title=\"NodeJs微服务技术栈\"></a>NodeJs微服务技术栈</h3><p>在Wyatt Preul分享的ppt示例中，有这样一副图，如下。图中用到了很多新的技术栈。包括下面几个方面：</p>\n<ul>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">Docker</a> </li>\n<li><a href=\"https://www.consul.io/\" target=\"_blank\" rel=\"external\">Consul</a></li>\n<li><a href=\"https://docs.traefik.io/\" target=\"_blank\" rel=\"external\">Træfɪk</a></li>\n<li><a href=\"https://github.com/devfacet/natsboard\" target=\"_blank\" rel=\"external\">NATS</a></li>\n<li><a href=\"https://prometheus.io\" target=\"_blank\" rel=\"external\">Prometheus</a></li>\n<li><a href=\"https://github.com/influxdata/influxdb\" target=\"_blank\" rel=\"external\">InfluxDB</a><br><img src=\"../images/1.png\" alt=\"\"></li>\n</ul>\n<p>图中带有Node标识的都是一个个的应用服务，其余的是示例中所用到一些网络及数据服务。并且这些服务都包在一个个的docker的容器中。<br>下面我们将介绍上述相关的技术。可能偏向devOps了，所以没有深入了解，只当普及一下知识面。</p>\n<h5 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h5><p>1.什么是Docker？</p>\n<blockquote>\n<p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。<br>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。如下图。<br>传统虚拟化和Docker的不同之处在于传统的虚拟化技术，会运行一套完整的操作系统。</p>\n</blockquote>\n<p><img src=\"../images/12.png\" alt=\"\"><br><img src=\"../images/11.png\" alt=\"\"></p>\n<p>本文的示例源码中，用到了很多docker的知识，设计镜像定制、容器操作、health check、端口暴露等,这里不作展开，感兴趣的自行查看文档。</p>\n<p>参考文档：<a href=\"https://yeasy.gitbooks.io/docker_practice/introduction/\" target=\"_blank\" rel=\"external\">docker</a></p>\n<h5 id=\"Consul\"><a href=\"#Consul\" class=\"headerlink\" title=\"Consul\"></a>Consul</h5><p>1.什么是Consul？</p>\n<blockquote>\n<p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.</p>\n</blockquote>\n<p>2.Consul的使用场景</p>\n<ul>\n<li>docker 实例的注册与配置共享</li>\n<li>coreos 实例的注册与配置共享</li>\n<li>vitess 集群</li>\n<li>SaaS 应用的配置共享</li>\n<li>与 confd 服务集成，动态生成 nginx 和 haproxy 配置文件</li>\n</ul>\n<p>3.Consul 的优势</p>\n<ul>\n<li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft.</li>\n<li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等. zookeeper 和 etcd 均不提供多数据中心功能的支持.</li>\n<li>支持健康检查. etcd 不提供此功能.</li>\n<li>支持 http 和 dns 协议接口. zookeeper 的集成较为复杂, etcd 只支持 http 协议.</li>\n<li>官方提供web管理界面, etcd 无此功能.</li>\n</ul>\n<p>4.Consul 的角色</p>\n<blockquote>\n<p>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群.<br> server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其他数据中心通讯. 每个数据中心的 server 数量推荐为 3 个或是 5 个.</p>\n</blockquote>\n<h5 id=\"Traefɪk\"><a href=\"#Traefɪk\" class=\"headerlink\" title=\"Træfɪk\"></a>Træfɪk</h5><blockquote>\n<p>Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。<br>主要作用是在多个Docker container 中实现负载均衡的，支持反向代理动态配置热更新如下图。</p>\n</blockquote>\n<p><img src=\"../images/10.png\" alt=\"\"></p>\n<p>参考中文文档：<a href=\"https://docs.traefik.cn/\" target=\"_blank\" rel=\"external\">Træfɪk</a><br>参考英文文档：<a href=\"https://docs.traefik.io/\" target=\"_blank\" rel=\"external\">Træfɪk</a></p>\n<h5 id=\"NATS\"><a href=\"#NATS\" class=\"headerlink\" title=\"NATS\"></a>NATS</h5><p>主要是提供一套即时的NAT server监控dashboard。详见<a href=\"https://github.com/devfacet/natsboard\" target=\"_blank\" rel=\"external\">github</a></p>\n<h5 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h5><p>1.什么是 Prometheus？</p>\n<blockquote>\n<p>Prometheus是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由SoundCloud公司开发的。<br>google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。</p>\n</blockquote>\n<p>2.Prometheus 的优点</p>\n<ul>\n<li>非常少的外部依赖，安装使用超简单</li>\n<li>已经有非常多的系统集成 例如：docker HAProxy Nginx JMX等等</li>\n<li>服务自动化发现</li>\n<li>直接集成到代码</li>\n<li>设计思想是按照分布式、微服务架构来实现的</li>\n</ul>\n<p>3.Prometheus 特性</p>\n<ul>\n<li>自定义多维度的数据模型</li>\n<li>非常高效的存储 平均一个采样数据占 ~3.5 bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。</li>\n<li>强大的查询语句</li>\n<li>轻松实现数据可视化</li>\n</ul>\n<p>4.系统架构</p>\n<p><img src=\"../images/9.png\" alt=\"\"></p>\n<p>服务过程: Prometheus daemon 负责定时去目标上pull metrics(指标) 数据，每个pull目标需要暴露一个http服务的接口给它定时抓取。<br>Prometheus支持通过配置文件、Consul、DNS、kubernetes等方式指定抓取目标。<br>Alertmanager 是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。<br>Prometheus支持很多方式的图表可视化，例如Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。<br>PushGateway这个组件是支持Client主动推送 metrics 到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</p>\n<p>参考文档：<a href=\"https://prometheus.io/docs/introduction/overview/\" target=\"_blank\" rel=\"external\">Prometheus</a></p>\n<h5 id=\"InfluxDB\"><a href=\"#InfluxDB\" class=\"headerlink\" title=\"InfluxDB\"></a>InfluxDB</h5><blockquote>\n<p>Influxdb是一个开源的分布式时序、时间和指标数据库，使用go语言编写，无需外部依赖。自带管理工具，支持sql查询，非常适合存储指标、事件、分析等数据。</p>\n</blockquote>\n<p>三大特性：</p>\n<ul>\n<li>时序性（Time Series）:与时间相关的函数的灵活使用（诸如最大、最小、求和等);</li>\n<li>度量（Metrics）:对实时大量数据进行计算;</li>\n<li>事件（Event）:支持任意的事件数据，换句话说，任意事件的数据我们都可以做操作;</li>\n</ul>\n<p>有兴趣的可以看文档：<a href=\"https://docs.influxdata.com/influxdb/v1.3/\" target=\"_blank\" rel=\"external\">InfluxDB</a></p>\n<h3 id=\"示例代码实践\"><a href=\"#示例代码实践\" class=\"headerlink\" title=\"示例代码实践\"></a>示例代码实践</h3><p>首先安装<a href=\"https://docs.docker.com/docker-for-mac/install/\" target=\"_blank\" rel=\"external\">docker for mac</a> ,否则无法运行示例。（示例的使用说明有误，localhost:10001没有对外发布，对内的，localhost就好）</p>\n<p>示例代码：<a href=\"https://github.com/autopilotpattern/nodejs-example\" target=\"_blank\" rel=\"external\">nodeJS-MicroServices-example</a></p>\n<p>相关展示界面如下：</p>\n<p>localhost:8080  =&gt;  Traefik<br><img src=\"../images/3.png\" alt=\"\"></p>\n<p>localhost:3000 =&gt; Nats<br><img src=\"../images/2.png\" alt=\"\"></p>\n<p>localhost:8083  =&gt;InfluxDB<br><img src=\"../images/4.png\" alt=\"\"></p>\n<p>localhost:8500 =&gt; Consul<br><img src=\"../images/5.png\" alt=\"\"></p>\n<p>localhost:9090 =&gt; Prometheus<br><img src=\"../images/6.png\" alt=\"\"></p>\n<p>localhost =&gt; 示例中NodeJS本身的应用服务<br><img src=\"../images/7.png\" alt=\"\"></p>\n<p>在docker中通过kitematic 可以管理、监控各个服务的运行情况.</p>\n<p><img src=\"../images/8.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><blockquote>\n<p>本文主要从autopilot入手，解释了什么是容器化的NodeJs微服务、NodeJs微服务所利用的技术栈，<br>并对这些技术进行了解释和说明。</p>\n</blockquote>\n<p>通过梳理jsconf中Wyatt Preul 分享的NodeJS Microservices on Autopilot的PPT，理清了什么是容器化的微服务。<br>当前的各类应用的服务中，后端的服务及业务逻辑之间是相互依赖的，而且服务也非常复杂，子服务之间相互的耦合比较高，那么在实际的应用中<br>可能会出现这样的场景，前端发起请求，然后请求超时，这时系统会爆出500出来，这时应用会一步步反馈当前的情况给后端运维人员，而这个过程是漫长的。。</p>\n<p>遇到上述的场景，我们想，过载的服务是否可以返回503状态码，同时负载均衡应该可以降低服务的分发任务，如何才能让请求超时的应用知道其他可用的服务并且在下一次请求可以成功。</p>\n<h3 id=\"什么是Autopilot-Pattern\"><a href=\"#什么是Autopilot-Pattern\" class=\"headerlink\" title=\"什么是Autopilot Pattern\"></a>什么是Autopilot Pattern</h3><p>autopilot的理念是将一个个的服务包装在containerPilot中，而每一个containerPilot都有一个docker Container容器。<br>各个服务通过nginx等负载均衡来管理，最终通过<code>consul</code>来实现多数据分布式共享。</p>\n<p>在应用还没有开发完毕时，我们想可以很简单的对其进行构建、测试、部署以及下线。在开发中，我们希望应用可以被一键部署和下线，<br>应用和工作流程能被自动化测试、应用和工作流能直接执行在我们的pc上如在云上一样、应用之间的关系应该是解耦的。</p>\n<p>利用Autopilot可以很容易实现部署和下线。通过Autopilot可以自动化执行不必要的东西，只保留必要的操作；<br>通过自动执行这些操作任务，使得应用程序保持在同一个版本中，提高了可见性。但最重要的是，这些应用程序是可以跨平台的。</p>\n<p>Autopilot Pattern 的特性：</p>\n<ul>\n<li>可以离线的开发；</li>\n<li>开发到部署完全自动化、可重复的工作流程自动化；</li>\n<li>运行在单个容器中的应用程序，相互解耦</li>\n<li>可以根据业务量需求，弹性的增加微服务的数量</li>\n<li>动态更新反向代理配置等</li>\n</ul>\n<p>Autopilot ContainerPilot：</p>\n<p>ContainerPilot会定时进行health check 来监控容器中服务的运行情况，一旦onChange就告知consul。生命周期如下图所示：<br><img src=\"../images/13.png\" alt=\"\"></p>\n<p>参考文档：<a href=\"http://autopilotpattern.io/\" target=\"_blank\" rel=\"external\">Autopilot Pattern Applications</a></p>\n<h3 id=\"NodeJs微服务技术栈\"><a href=\"#NodeJs微服务技术栈\" class=\"headerlink\" title=\"NodeJs微服务技术栈\"></a>NodeJs微服务技术栈</h3><p>在Wyatt Preul分享的ppt示例中，有这样一副图，如下。图中用到了很多新的技术栈。包括下面几个方面：</p>\n<ul>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">Docker</a> </li>\n<li><a href=\"https://www.consul.io/\" target=\"_blank\" rel=\"external\">Consul</a></li>\n<li><a href=\"https://docs.traefik.io/\" target=\"_blank\" rel=\"external\">Træfɪk</a></li>\n<li><a href=\"https://github.com/devfacet/natsboard\" target=\"_blank\" rel=\"external\">NATS</a></li>\n<li><a href=\"https://prometheus.io\" target=\"_blank\" rel=\"external\">Prometheus</a></li>\n<li><a href=\"https://github.com/influxdata/influxdb\" target=\"_blank\" rel=\"external\">InfluxDB</a><br><img src=\"../images/1.png\" alt=\"\"></li>\n</ul>\n<p>图中带有Node标识的都是一个个的应用服务，其余的是示例中所用到一些网络及数据服务。并且这些服务都包在一个个的docker的容器中。<br>下面我们将介绍上述相关的技术。可能偏向devOps了，所以没有深入了解，只当普及一下知识面。</p>\n<h5 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h5><p>1.什么是Docker？</p>\n<blockquote>\n<p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。<br>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。如下图。<br>传统虚拟化和Docker的不同之处在于传统的虚拟化技术，会运行一套完整的操作系统。</p>\n</blockquote>\n<p><img src=\"../images/12.png\" alt=\"\"><br><img src=\"../images/11.png\" alt=\"\"></p>\n<p>本文的示例源码中，用到了很多docker的知识，设计镜像定制、容器操作、health check、端口暴露等,这里不作展开，感兴趣的自行查看文档。</p>\n<p>参考文档：<a href=\"https://yeasy.gitbooks.io/docker_practice/introduction/\" target=\"_blank\" rel=\"external\">docker</a></p>\n<h5 id=\"Consul\"><a href=\"#Consul\" class=\"headerlink\" title=\"Consul\"></a>Consul</h5><p>1.什么是Consul？</p>\n<blockquote>\n<p>Consul 是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件,由 HashiCorp 公司用 Go 语言开发, 基于 Mozilla Public License 2.0 的协议进行开源. Consul 支持健康检查,并允许 HTTP 和 DNS 协议调用 API 存储键值对.</p>\n</blockquote>\n<p>2.Consul的使用场景</p>\n<ul>\n<li>docker 实例的注册与配置共享</li>\n<li>coreos 实例的注册与配置共享</li>\n<li>vitess 集群</li>\n<li>SaaS 应用的配置共享</li>\n<li>与 confd 服务集成，动态生成 nginx 和 haproxy 配置文件</li>\n</ul>\n<p>3.Consul 的优势</p>\n<ul>\n<li>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接. 相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft.</li>\n<li>支持多数据中心，内外网的服务采用不同的端口进行监听。 多数据中心集群可以避免单数据中心的单点故障,而其部署则需要考虑网络延迟, 分片等情况等. zookeeper 和 etcd 均不提供多数据中心功能的支持.</li>\n<li>支持健康检查. etcd 不提供此功能.</li>\n<li>支持 http 和 dns 协议接口. zookeeper 的集成较为复杂, etcd 只支持 http 协议.</li>\n<li>官方提供web管理界面, etcd 无此功能.</li>\n</ul>\n<p>4.Consul 的角色</p>\n<blockquote>\n<p>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群.<br> server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其他数据中心通讯. 每个数据中心的 server 数量推荐为 3 个或是 5 个.</p>\n</blockquote>\n<h5 id=\"Traefɪk\"><a href=\"#Traefɪk\" class=\"headerlink\" title=\"Træfɪk\"></a>Træfɪk</h5><blockquote>\n<p>Træfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。 它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。<br>主要作用是在多个Docker container 中实现负载均衡的，支持反向代理动态配置热更新如下图。</p>\n</blockquote>\n<p><img src=\"../images/10.png\" alt=\"\"></p>\n<p>参考中文文档：<a href=\"https://docs.traefik.cn/\" target=\"_blank\" rel=\"external\">Træfɪk</a><br>参考英文文档：<a href=\"https://docs.traefik.io/\" target=\"_blank\" rel=\"external\">Træfɪk</a></p>\n<h5 id=\"NATS\"><a href=\"#NATS\" class=\"headerlink\" title=\"NATS\"></a>NATS</h5><p>主要是提供一套即时的NAT server监控dashboard。详见<a href=\"https://github.com/devfacet/natsboard\" target=\"_blank\" rel=\"external\">github</a></p>\n<h5 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h5><p>1.什么是 Prometheus？</p>\n<blockquote>\n<p>Prometheus是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由SoundCloud公司开发的。<br>google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。</p>\n</blockquote>\n<p>2.Prometheus 的优点</p>\n<ul>\n<li>非常少的外部依赖，安装使用超简单</li>\n<li>已经有非常多的系统集成 例如：docker HAProxy Nginx JMX等等</li>\n<li>服务自动化发现</li>\n<li>直接集成到代码</li>\n<li>设计思想是按照分布式、微服务架构来实现的</li>\n</ul>\n<p>3.Prometheus 特性</p>\n<ul>\n<li>自定义多维度的数据模型</li>\n<li>非常高效的存储 平均一个采样数据占 ~3.5 bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。</li>\n<li>强大的查询语句</li>\n<li>轻松实现数据可视化</li>\n</ul>\n<p>4.系统架构</p>\n<p><img src=\"../images/9.png\" alt=\"\"></p>\n<p>服务过程: Prometheus daemon 负责定时去目标上pull metrics(指标) 数据，每个pull目标需要暴露一个http服务的接口给它定时抓取。<br>Prometheus支持通过配置文件、Consul、DNS、kubernetes等方式指定抓取目标。<br>Alertmanager 是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。<br>Prometheus支持很多方式的图表可视化，例如Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。<br>PushGateway这个组件是支持Client主动推送 metrics 到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</p>\n<p>参考文档：<a href=\"https://prometheus.io/docs/introduction/overview/\" target=\"_blank\" rel=\"external\">Prometheus</a></p>\n<h5 id=\"InfluxDB\"><a href=\"#InfluxDB\" class=\"headerlink\" title=\"InfluxDB\"></a>InfluxDB</h5><blockquote>\n<p>Influxdb是一个开源的分布式时序、时间和指标数据库，使用go语言编写，无需外部依赖。自带管理工具，支持sql查询，非常适合存储指标、事件、分析等数据。</p>\n</blockquote>\n<p>三大特性：</p>\n<ul>\n<li>时序性（Time Series）:与时间相关的函数的灵活使用（诸如最大、最小、求和等);</li>\n<li>度量（Metrics）:对实时大量数据进行计算;</li>\n<li>事件（Event）:支持任意的事件数据，换句话说，任意事件的数据我们都可以做操作;</li>\n</ul>\n<p>有兴趣的可以看文档：<a href=\"https://docs.influxdata.com/influxdb/v1.3/\" target=\"_blank\" rel=\"external\">InfluxDB</a></p>\n<h3 id=\"示例代码实践\"><a href=\"#示例代码实践\" class=\"headerlink\" title=\"示例代码实践\"></a>示例代码实践</h3><p>首先安装<a href=\"https://docs.docker.com/docker-for-mac/install/\" target=\"_blank\" rel=\"external\">docker for mac</a> ,否则无法运行示例。（示例的使用说明有误，localhost:10001没有对外发布，对内的，localhost就好）</p>\n<p>示例代码：<a href=\"https://github.com/autopilotpattern/nodejs-example\" target=\"_blank\" rel=\"external\">nodeJS-MicroServices-example</a></p>\n<p>相关展示界面如下：</p>\n<p>localhost:8080  =&gt;  Traefik<br><img src=\"../images/3.png\" alt=\"\"></p>\n<p>localhost:3000 =&gt; Nats<br><img src=\"../images/2.png\" alt=\"\"></p>\n<p>localhost:8083  =&gt;InfluxDB<br><img src=\"../images/4.png\" alt=\"\"></p>\n<p>localhost:8500 =&gt; Consul<br><img src=\"../images/5.png\" alt=\"\"></p>\n<p>localhost:9090 =&gt; Prometheus<br><img src=\"../images/6.png\" alt=\"\"></p>\n<p>localhost =&gt; 示例中NodeJS本身的应用服务<br><img src=\"../images/7.png\" alt=\"\"></p>\n<p>在docker中通过kitematic 可以管理、监控各个服务的运行情况.</p>\n<p><img src=\"../images/8.png\" alt=\"\"></p>\n"},{"title":"react同构研究","date":"2017-04-14T09:18:00.000Z","_content":"\n","source":"_posts/react同构研究.md","raw":"---\ntitle: react同构研究\ndate: 2017-04-14 17:18:00\ntags: react \n---\n\n","slug":"react同构研究","published":1,"updated":"2017-04-19T13:01:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uk41yp000485125p6p36rg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"RN框架下多屏幕尺寸自适应样式解决方案","date":"2017-03-10T07:22:27.000Z","_content":"### RN框架下多屏幕尺寸自适应样式解决方案\n\n@(react native)[ 屏幕适配|]\n\n[TOC]\n\n#### 引言\n >屏幕适配是一个很容易被忽略的问题，但对于精益求精的产品而言，是必不可少的。移动端的适配的目的是让UI效果在不同分辨率的设备下，样式不会走形。换言之，就是如何同一套代码在不同分辨率的手机上跑时，页面元素间的布局间距，留白，以及图片大小会随着变化，在比例上跟设计稿一致。\n在web中，可以通过多种方式来进行适配，比如设置viewpoint、media查询等，因此对于嵌入移动的H5页面的适配问题，本文将不做讨论和展开。React native是一套开源的框架，借助RN可以快速的开发出移动APP,包括IOS及Android两端。同样RN框架也存在着多屏幕尺寸的适配问题，并且对Android的支持不是很友好。\n\n#### 问题分析\n>不同的机型手机的屏幕尺寸不同，像素级别也不一样，所以样式的展示方式会存在差异。在RN的开发框架下，采用的是flex的布局方式，而flex的布局中，是不支持根据屏幕的尺寸，来进行百分比布局的，因此在设置宽度或者高度时是不需要单位的。\n    在RN中的单位是pt，因此可以通过Dimensions 来获取设备的宽高，PixelRatio 获取设备屏幕密度值。\n\n#### 解决方案\n1.\tflex弹性布局\n\n采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size，如图1所示。\n![](../images/2-1.png)\n\n   在移动端的设备中一般都是采用flex弹性布局的方式，在设置容器中的项目宽度时，可以根据flexDirection 来设置项目的排列方式，项目会根据flex的值来划分所占的宽高。\n   \n   示例：ios6 和ios6plus 下的布局自适应\n ![](../images/2-2.png)\n 如上图2所示，在代码中我们按行进行排列，设置第一行的高度为deviceHight/2.容器的显示方式为flex。\n至此，我认为在容器当中，不能设置定高，比如height：200，应当进行换算，比如deviceHight/n来设置。而容器中的项目，可以根据容器的高度来进行定高的划分。那么布局上就可以满足自适应的需求。\n\n2. 图片自适应\n\n在不同的屏幕下，所表现的图标清晰度及大小会发生改变，那么具体的解决方式有如下几种。\n安装第三发的npm的包：\n（1）react-native-fit-image 类似于image组件，示例如图3所示，ios6 plus和Ios7比较。\n![](../images/2-3.png)\n代码如图4所示：\n![](../images/2-8.png)\n 经过判断，该包可以满足图片的在设备上的自适应。\n （2）react-native-style-loader 可以使用web css的方式来进行RN适配的包。支持media查询、支持css中的px, vw, vh, rem, pt 单位。\n\n3. 可以按官网中的现有的文档适配图片布局\n\n（1） 官网中Image包含resizeMode这一属性，属性值包括contain, cover, stretch。默认不设置模式等于cover模式。如图5所示，三种模式的不同效果。\ncover模式自适应宽高，给出高度值即可；\ncontain铺满容器，但是会做截取；\nstretch铺满容器，拉伸；\n![](../images/2-4.png)\n目前我们的项目中，所用的模式是属于默认模式，也就是cover，就如图5中最上层样式。\n（2）官网中还有一种方式，是通过PixelRatio 获取屏幕的像素密度，从而达到图片的自适应。如图6所示。\n![](../images/2-5.png)\n由图6中可以看出，像素密度的值只有3个：1，2，3，即可以通过设置图片的宽高＊像素密度值来加载不同的图片。目前项目中，默认也是通过这种方式来加载图片。\n（3）可以根据不同设备的宽高，将 UI 等比放大到 app 上的自适应布局，假设需要100*100的图。代码如图7所示。\n![](../images/2-6.png)\n（4）可以根据设备的宽高比，来取得屏幕的像素点的值，最后进行样式转换。如图8所示。\n![](../images/2-7.png)\n#### 四、总结\n    RN基于pt为单位，可以通过Dimensions来获取宽高，PixelRatio 获取密度，不支持百分比，但可以通过获取屏幕宽度手动计算进行百分比布局。图片的自适应方式上，可以按需求来规划，具体方案还需要讨论再确定。方案的撰写过程中，感谢同事天宝和鹏飞的帮助，给了一些解决方案。\n\n#### 参考资料\n（1）flex布局:http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n（2）react－native 布局: https://segmentfault.com/a/1190000002658374\n（3）react-native-fit-image: https://github.com/huiseoul/react-native-fit-image\n（4）react-native-style-loader:https://github.com/dengchengmi/react-native-style-loader\n（5）Responsive Design: https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8 - .hx2xn94fp\n","source":"_posts/RN框架下多屏幕尺寸自适应样式解决方案.md","raw":"---\ntitle: RN框架下多屏幕尺寸自适应样式解决方案\ndate: 2017-03-10 15:22:27\ntags: react native\n---\n### RN框架下多屏幕尺寸自适应样式解决方案\n\n@(react native)[ 屏幕适配|]\n\n[TOC]\n\n#### 引言\n >屏幕适配是一个很容易被忽略的问题，但对于精益求精的产品而言，是必不可少的。移动端的适配的目的是让UI效果在不同分辨率的设备下，样式不会走形。换言之，就是如何同一套代码在不同分辨率的手机上跑时，页面元素间的布局间距，留白，以及图片大小会随着变化，在比例上跟设计稿一致。\n在web中，可以通过多种方式来进行适配，比如设置viewpoint、media查询等，因此对于嵌入移动的H5页面的适配问题，本文将不做讨论和展开。React native是一套开源的框架，借助RN可以快速的开发出移动APP,包括IOS及Android两端。同样RN框架也存在着多屏幕尺寸的适配问题，并且对Android的支持不是很友好。\n\n#### 问题分析\n>不同的机型手机的屏幕尺寸不同，像素级别也不一样，所以样式的展示方式会存在差异。在RN的开发框架下，采用的是flex的布局方式，而flex的布局中，是不支持根据屏幕的尺寸，来进行百分比布局的，因此在设置宽度或者高度时是不需要单位的。\n    在RN中的单位是pt，因此可以通过Dimensions 来获取设备的宽高，PixelRatio 获取设备屏幕密度值。\n\n#### 解决方案\n1.\tflex弹性布局\n\n采用Flex布局的元素，称为Flex容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称\"项目\"。\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size，如图1所示。\n![](../images/2-1.png)\n\n   在移动端的设备中一般都是采用flex弹性布局的方式，在设置容器中的项目宽度时，可以根据flexDirection 来设置项目的排列方式，项目会根据flex的值来划分所占的宽高。\n   \n   示例：ios6 和ios6plus 下的布局自适应\n ![](../images/2-2.png)\n 如上图2所示，在代码中我们按行进行排列，设置第一行的高度为deviceHight/2.容器的显示方式为flex。\n至此，我认为在容器当中，不能设置定高，比如height：200，应当进行换算，比如deviceHight/n来设置。而容器中的项目，可以根据容器的高度来进行定高的划分。那么布局上就可以满足自适应的需求。\n\n2. 图片自适应\n\n在不同的屏幕下，所表现的图标清晰度及大小会发生改变，那么具体的解决方式有如下几种。\n安装第三发的npm的包：\n（1）react-native-fit-image 类似于image组件，示例如图3所示，ios6 plus和Ios7比较。\n![](../images/2-3.png)\n代码如图4所示：\n![](../images/2-8.png)\n 经过判断，该包可以满足图片的在设备上的自适应。\n （2）react-native-style-loader 可以使用web css的方式来进行RN适配的包。支持media查询、支持css中的px, vw, vh, rem, pt 单位。\n\n3. 可以按官网中的现有的文档适配图片布局\n\n（1） 官网中Image包含resizeMode这一属性，属性值包括contain, cover, stretch。默认不设置模式等于cover模式。如图5所示，三种模式的不同效果。\ncover模式自适应宽高，给出高度值即可；\ncontain铺满容器，但是会做截取；\nstretch铺满容器，拉伸；\n![](../images/2-4.png)\n目前我们的项目中，所用的模式是属于默认模式，也就是cover，就如图5中最上层样式。\n（2）官网中还有一种方式，是通过PixelRatio 获取屏幕的像素密度，从而达到图片的自适应。如图6所示。\n![](../images/2-5.png)\n由图6中可以看出，像素密度的值只有3个：1，2，3，即可以通过设置图片的宽高＊像素密度值来加载不同的图片。目前项目中，默认也是通过这种方式来加载图片。\n（3）可以根据不同设备的宽高，将 UI 等比放大到 app 上的自适应布局，假设需要100*100的图。代码如图7所示。\n![](../images/2-6.png)\n（4）可以根据设备的宽高比，来取得屏幕的像素点的值，最后进行样式转换。如图8所示。\n![](../images/2-7.png)\n#### 四、总结\n    RN基于pt为单位，可以通过Dimensions来获取宽高，PixelRatio 获取密度，不支持百分比，但可以通过获取屏幕宽度手动计算进行百分比布局。图片的自适应方式上，可以按需求来规划，具体方案还需要讨论再确定。方案的撰写过程中，感谢同事天宝和鹏飞的帮助，给了一些解决方案。\n\n#### 参考资料\n（1）flex布局:http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\n（2）react－native 布局: https://segmentfault.com/a/1190000002658374\n（3）react-native-fit-image: https://github.com/huiseoul/react-native-fit-image\n（4）react-native-style-loader:https://github.com/dengchengmi/react-native-style-loader\n（5）Responsive Design: https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8 - .hx2xn94fp\n","slug":"RN框架下多屏幕尺寸自适应样式解决方案","published":1,"updated":"2017-04-19T13:01:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5uk41yq00058512sj8aclgh","content":"<h3 id=\"RN框架下多屏幕尺寸自适应样式解决方案\"><a href=\"#RN框架下多屏幕尺寸自适应样式解决方案\" class=\"headerlink\" title=\"RN框架下多屏幕尺寸自适应样式解决方案\"></a>RN框架下多屏幕尺寸自适应样式解决方案</h3><p>@(react native)[ 屏幕适配|]</p>\n<p>[TOC]</p>\n<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><blockquote>\n<p>屏幕适配是一个很容易被忽略的问题，但对于精益求精的产品而言，是必不可少的。移动端的适配的目的是让UI效果在不同分辨率的设备下，样式不会走形。换言之，就是如何同一套代码在不同分辨率的手机上跑时，页面元素间的布局间距，留白，以及图片大小会随着变化，在比例上跟设计稿一致。<br>在web中，可以通过多种方式来进行适配，比如设置viewpoint、media查询等，因此对于嵌入移动的H5页面的适配问题，本文将不做讨论和展开。React native是一套开源的框架，借助RN可以快速的开发出移动APP,包括IOS及Android两端。同样RN框架也存在着多屏幕尺寸的适配问题，并且对Android的支持不是很友好。</p>\n</blockquote>\n<h4 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h4><blockquote>\n<p>不同的机型手机的屏幕尺寸不同，像素级别也不一样，所以样式的展示方式会存在差异。在RN的开发框架下，采用的是flex的布局方式，而flex的布局中，是不支持根据屏幕的尺寸，来进行百分比布局的，因此在设置宽度或者高度时是不需要单位的。<br>    在RN中的单位是pt，因此可以通过Dimensions 来获取设备的宽高，PixelRatio 获取设备屏幕密度值。</p>\n</blockquote>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>flex弹性布局</li>\n</ol>\n<p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。<br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size，如图1所示。<br><img src=\"../images/2-1.png\" alt=\"\"></p>\n<p>   在移动端的设备中一般都是采用flex弹性布局的方式，在设置容器中的项目宽度时，可以根据flexDirection 来设置项目的排列方式，项目会根据flex的值来划分所占的宽高。</p>\n<p>   示例：ios6 和ios6plus 下的布局自适应<br> <img src=\"../images/2-2.png\" alt=\"\"><br> 如上图2所示，在代码中我们按行进行排列，设置第一行的高度为deviceHight/2.容器的显示方式为flex。<br>至此，我认为在容器当中，不能设置定高，比如height：200，应当进行换算，比如deviceHight/n来设置。而容器中的项目，可以根据容器的高度来进行定高的划分。那么布局上就可以满足自适应的需求。</p>\n<ol>\n<li>图片自适应</li>\n</ol>\n<p>在不同的屏幕下，所表现的图标清晰度及大小会发生改变，那么具体的解决方式有如下几种。<br>安装第三发的npm的包：<br>（1）react-native-fit-image 类似于image组件，示例如图3所示，ios6 plus和Ios7比较。<br><img src=\"../images/2-3.png\" alt=\"\"><br>代码如图4所示：<br><img src=\"../images/2-8.png\" alt=\"\"><br> 经过判断，该包可以满足图片的在设备上的自适应。<br> （2）react-native-style-loader 可以使用web css的方式来进行RN适配的包。支持media查询、支持css中的px, vw, vh, rem, pt 单位。</p>\n<ol>\n<li>可以按官网中的现有的文档适配图片布局</li>\n</ol>\n<p>（1） 官网中Image包含resizeMode这一属性，属性值包括contain, cover, stretch。默认不设置模式等于cover模式。如图5所示，三种模式的不同效果。<br>cover模式自适应宽高，给出高度值即可；<br>contain铺满容器，但是会做截取；<br>stretch铺满容器，拉伸；<br><img src=\"../images/2-4.png\" alt=\"\"><br>目前我们的项目中，所用的模式是属于默认模式，也就是cover，就如图5中最上层样式。<br>（2）官网中还有一种方式，是通过PixelRatio 获取屏幕的像素密度，从而达到图片的自适应。如图6所示。<br><img src=\"../images/2-5.png\" alt=\"\"><br>由图6中可以看出，像素密度的值只有3个：1，2，3，即可以通过设置图片的宽高＊像素密度值来加载不同的图片。目前项目中，默认也是通过这种方式来加载图片。<br>（3）可以根据不同设备的宽高，将 UI 等比放大到 app 上的自适应布局，假设需要100*100的图。代码如图7所示。<br><img src=\"../images/2-6.png\" alt=\"\"><br>（4）可以根据设备的宽高比，来取得屏幕的像素点的值，最后进行样式转换。如图8所示。<br><img src=\"../images/2-7.png\" alt=\"\"></p>\n<h4 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h4><pre><code>RN基于pt为单位，可以通过Dimensions来获取宽高，PixelRatio 获取密度，不支持百分比，但可以通过获取屏幕宽度手动计算进行百分比布局。图片的自适应方式上，可以按需求来规划，具体方案还需要讨论再确定。方案的撰写过程中，感谢同事天宝和鹏飞的帮助，给了一些解决方案。\n</code></pre><h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p>（1）flex布局:<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><br>（2）react－native 布局: <a href=\"https://segmentfault.com/a/1190000002658374\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000002658374</a><br>（3）react-native-fit-image: <a href=\"https://github.com/huiseoul/react-native-fit-image\" target=\"_blank\" rel=\"external\">https://github.com/huiseoul/react-native-fit-image</a><br>（4）react-native-style-loader:<a href=\"https://github.com/dengchengmi/react-native-style-loader\" target=\"_blank\" rel=\"external\">https://github.com/dengchengmi/react-native-style-loader</a><br>（5）Responsive Design: <a href=\"https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8\" target=\"_blank\" rel=\"external\">https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8</a> - .hx2xn94fp</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"RN框架下多屏幕尺寸自适应样式解决方案\"><a href=\"#RN框架下多屏幕尺寸自适应样式解决方案\" class=\"headerlink\" title=\"RN框架下多屏幕尺寸自适应样式解决方案\"></a>RN框架下多屏幕尺寸自适应样式解决方案</h3><p>@(react native)[ 屏幕适配|]</p>\n<p>[TOC]</p>\n<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><blockquote>\n<p>屏幕适配是一个很容易被忽略的问题，但对于精益求精的产品而言，是必不可少的。移动端的适配的目的是让UI效果在不同分辨率的设备下，样式不会走形。换言之，就是如何同一套代码在不同分辨率的手机上跑时，页面元素间的布局间距，留白，以及图片大小会随着变化，在比例上跟设计稿一致。<br>在web中，可以通过多种方式来进行适配，比如设置viewpoint、media查询等，因此对于嵌入移动的H5页面的适配问题，本文将不做讨论和展开。React native是一套开源的框架，借助RN可以快速的开发出移动APP,包括IOS及Android两端。同样RN框架也存在着多屏幕尺寸的适配问题，并且对Android的支持不是很友好。</p>\n</blockquote>\n<h4 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h4><blockquote>\n<p>不同的机型手机的屏幕尺寸不同，像素级别也不一样，所以样式的展示方式会存在差异。在RN的开发框架下，采用的是flex的布局方式，而flex的布局中，是不支持根据屏幕的尺寸，来进行百分比布局的，因此在设置宽度或者高度时是不需要单位的。<br>    在RN中的单位是pt，因此可以通过Dimensions 来获取设备的宽高，PixelRatio 获取设备屏幕密度值。</p>\n</blockquote>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ol>\n<li>flex弹性布局</li>\n</ol>\n<p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。<br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size，如图1所示。<br><img src=\"../images/2-1.png\" alt=\"\"></p>\n<p>   在移动端的设备中一般都是采用flex弹性布局的方式，在设置容器中的项目宽度时，可以根据flexDirection 来设置项目的排列方式，项目会根据flex的值来划分所占的宽高。</p>\n<p>   示例：ios6 和ios6plus 下的布局自适应<br> <img src=\"../images/2-2.png\" alt=\"\"><br> 如上图2所示，在代码中我们按行进行排列，设置第一行的高度为deviceHight/2.容器的显示方式为flex。<br>至此，我认为在容器当中，不能设置定高，比如height：200，应当进行换算，比如deviceHight/n来设置。而容器中的项目，可以根据容器的高度来进行定高的划分。那么布局上就可以满足自适应的需求。</p>\n<ol>\n<li>图片自适应</li>\n</ol>\n<p>在不同的屏幕下，所表现的图标清晰度及大小会发生改变，那么具体的解决方式有如下几种。<br>安装第三发的npm的包：<br>（1）react-native-fit-image 类似于image组件，示例如图3所示，ios6 plus和Ios7比较。<br><img src=\"../images/2-3.png\" alt=\"\"><br>代码如图4所示：<br><img src=\"../images/2-8.png\" alt=\"\"><br> 经过判断，该包可以满足图片的在设备上的自适应。<br> （2）react-native-style-loader 可以使用web css的方式来进行RN适配的包。支持media查询、支持css中的px, vw, vh, rem, pt 单位。</p>\n<ol>\n<li>可以按官网中的现有的文档适配图片布局</li>\n</ol>\n<p>（1） 官网中Image包含resizeMode这一属性，属性值包括contain, cover, stretch。默认不设置模式等于cover模式。如图5所示，三种模式的不同效果。<br>cover模式自适应宽高，给出高度值即可；<br>contain铺满容器，但是会做截取；<br>stretch铺满容器，拉伸；<br><img src=\"../images/2-4.png\" alt=\"\"><br>目前我们的项目中，所用的模式是属于默认模式，也就是cover，就如图5中最上层样式。<br>（2）官网中还有一种方式，是通过PixelRatio 获取屏幕的像素密度，从而达到图片的自适应。如图6所示。<br><img src=\"../images/2-5.png\" alt=\"\"><br>由图6中可以看出，像素密度的值只有3个：1，2，3，即可以通过设置图片的宽高＊像素密度值来加载不同的图片。目前项目中，默认也是通过这种方式来加载图片。<br>（3）可以根据不同设备的宽高，将 UI 等比放大到 app 上的自适应布局，假设需要100*100的图。代码如图7所示。<br><img src=\"../images/2-6.png\" alt=\"\"><br>（4）可以根据设备的宽高比，来取得屏幕的像素点的值，最后进行样式转换。如图8所示。<br><img src=\"../images/2-7.png\" alt=\"\"></p>\n<h4 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h4><pre><code>RN基于pt为单位，可以通过Dimensions来获取宽高，PixelRatio 获取密度，不支持百分比，但可以通过获取屏幕宽度手动计算进行百分比布局。图片的自适应方式上，可以按需求来规划，具体方案还需要讨论再确定。方案的撰写过程中，感谢同事天宝和鹏飞的帮助，给了一些解决方案。\n</code></pre><h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p>（1）flex布局:<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><br>（2）react－native 布局: <a href=\"https://segmentfault.com/a/1190000002658374\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000002658374</a><br>（3）react-native-fit-image: <a href=\"https://github.com/huiseoul/react-native-fit-image\" target=\"_blank\" rel=\"external\">https://github.com/huiseoul/react-native-fit-image</a><br>（4）react-native-style-loader:<a href=\"https://github.com/dengchengmi/react-native-style-loader\" target=\"_blank\" rel=\"external\">https://github.com/dengchengmi/react-native-style-loader</a><br>（5）Responsive Design: <a href=\"https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8\" target=\"_blank\" rel=\"external\">https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8</a> - .hx2xn94fp</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj5uk41yf00008512mc1m7n19","tag_id":"cj5uk41yn000385124p3l2srv","_id":"cj5uk41yu00078512iawe46os"},{"post_id":"cj5uk41yk00028512rgmlugeu","tag_id":"cj5uk41yn000385124p3l2srv","_id":"cj5uk41yu00098512q21mwqlw"},{"post_id":"cj5uk41yp000485125p6p36rg","tag_id":"cj5uk41yu00088512nq903x7z","_id":"cj5uk41yv000b851243fd66qx"},{"post_id":"cj5uk41yq00058512sj8aclgh","tag_id":"cj5uk41yu000a85122heesptw","_id":"cj5uk41yv000c8512zqhmtbgh"}],"Tag":[{"name":"NodeJs","_id":"cj5uk41yn000385124p3l2srv"},{"name":"react","_id":"cj5uk41yu00088512nq903x7z"},{"name":"react native","_id":"cj5uk41yu000a85122heesptw"}]}}